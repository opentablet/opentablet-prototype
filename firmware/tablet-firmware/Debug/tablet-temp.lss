
tablet-temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00001dca  00001e5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800148  00800148  00001ea6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ea6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ed8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b4b  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d80  00000000  00000000  00008d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009bd0  00000000  00000000  0000ab1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c28  00000000  00000000  000146ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000156cf  00000000  00000000  00015314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004e95  00000000  00000000  0002a9e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d00  00000000  00000000  0002f878  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006ee3  00000000  00000000  00030578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	b0 c0       	rjmp	.+352    	; 0x166 <__bad_interrupt>
       6:	00 00       	nop
       8:	ae c0       	rjmp	.+348    	; 0x166 <__bad_interrupt>
       a:	00 00       	nop
       c:	ac c0       	rjmp	.+344    	; 0x166 <__bad_interrupt>
       e:	00 00       	nop
      10:	aa c0       	rjmp	.+340    	; 0x166 <__bad_interrupt>
      12:	00 00       	nop
      14:	a8 c0       	rjmp	.+336    	; 0x166 <__bad_interrupt>
      16:	00 00       	nop
      18:	a6 c0       	rjmp	.+332    	; 0x166 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a4 c0       	rjmp	.+328    	; 0x166 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a2 c0       	rjmp	.+324    	; 0x166 <__bad_interrupt>
      22:	00 00       	nop
      24:	a0 c0       	rjmp	.+320    	; 0x166 <__bad_interrupt>
      26:	00 00       	nop
      28:	9e c0       	rjmp	.+316    	; 0x166 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	60 c7       	rjmp	.+3776   	; 0xeee <__vector_11>
      2e:	00 00       	nop
      30:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__vector_12>
      34:	98 c0       	rjmp	.+304    	; 0x166 <__bad_interrupt>
      36:	00 00       	nop
      38:	96 c0       	rjmp	.+300    	; 0x166 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	94 c0       	rjmp	.+296    	; 0x166 <__bad_interrupt>
      3e:	00 00       	nop
      40:	92 c0       	rjmp	.+292    	; 0x166 <__bad_interrupt>
      42:	00 00       	nop
      44:	90 c0       	rjmp	.+288    	; 0x166 <__bad_interrupt>
      46:	00 00       	nop
      48:	8e c0       	rjmp	.+284    	; 0x166 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c0       	rjmp	.+280    	; 0x166 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8a c0       	rjmp	.+276    	; 0x166 <__bad_interrupt>
      52:	00 00       	nop
      54:	88 c0       	rjmp	.+272    	; 0x166 <__bad_interrupt>
      56:	00 00       	nop
      58:	86 c0       	rjmp	.+268    	; 0x166 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c0       	rjmp	.+264    	; 0x166 <__bad_interrupt>
      5e:	00 00       	nop
      60:	82 c0       	rjmp	.+260    	; 0x166 <__bad_interrupt>
      62:	00 00       	nop
      64:	80 c0       	rjmp	.+256    	; 0x166 <__bad_interrupt>
      66:	00 00       	nop
      68:	7e c0       	rjmp	.+252    	; 0x166 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7c c0       	rjmp	.+248    	; 0x166 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7a c0       	rjmp	.+244    	; 0x166 <__bad_interrupt>
	...

00000074 <ProductString>:
      74:	12 03 74 00 61 00 62 00 20 00 74 00 65 00 73 00     ..t.a.b. .t.e.s.
      84:	74 00 00 00                                         t...

00000088 <ManufacturerString>:
      88:	08 03 6a 00 70 00 65 00 00 00                       ..j.p.e...

00000092 <LanguageString>:
      92:	04 03 09 04                                         ....

00000096 <ConfigurationDescriptor>:
      96:	09 02 5f 00 03 01 00 c0 fa 08 0b 00 02 02 02 01     .._.............
      a6:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
      b6:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
      c6:	04 01 00 02 0a 00 00 00 07 05 04 02 10 00 05 07     ................
      d6:	05 83 02 10 00 05 09 04 02 00 01 03 01 02 00 09     ................
      e6:	21 11 01 00 01 22 24 00 07 05 81 03 08 00 05        !...."$........

000000f5 <DeviceDescriptor>:
      f5:	12 01 10 01 ef 02 01 08 66 66 7b 72 01 00 01 02     ........ff{r....
     105:	dc 01                                               ..

00000107 <MouseReport>:
     107:	05 01 09 02 a1 01 09 01 a1 00 05 01 09 30 09 31     .............0.1
     117:	16 00 00 26 ff 7f 36 00 00 46 ff 7f 75 10 95 02     ...&..6..F..u...
     127:	81 02 c0 c0 00                                      .....

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d2 e0       	ldi	r29, 0x02	; 2
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	ea ec       	ldi	r30, 0xCA	; 202
     140:	fd e1       	ldi	r31, 0x1D	; 29
     142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
     144:	05 90       	lpm	r0, Z+
     146:	0d 92       	st	X+, r0
     148:	a8 34       	cpi	r26, 0x48	; 72
     14a:	b1 07       	cpc	r27, r17
     14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
     14e:	21 e0       	ldi	r18, 0x01	; 1
     150:	a8 e4       	ldi	r26, 0x48	; 72
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
     156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
     158:	a9 35       	cpi	r26, 0x59	; 89
     15a:	b2 07       	cpc	r27, r18
     15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
     15e:	0e 94 17 0a 	call	0x142e	; 0x142e <main>
     162:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <_exit>

00000166 <__bad_interrupt>:
     166:	4c cf       	rjmp	.-360    	; 0x0 <__vectors>

00000168 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     168:	29 2f       	mov	r18, r25
     16a:	33 27       	eor	r19, r19
     16c:	23 30       	cpi	r18, 0x03	; 3
     16e:	31 05       	cpc	r19, r1
     170:	c9 f0       	breq	.+50     	; 0x1a4 <CALLBACK_USB_GetDescriptor+0x3c>
     172:	38 f4       	brcc	.+14     	; 0x182 <CALLBACK_USB_GetDescriptor+0x1a>
     174:	21 30       	cpi	r18, 0x01	; 1
     176:	31 05       	cpc	r19, r1
     178:	59 f0       	breq	.+22     	; 0x190 <CALLBACK_USB_GetDescriptor+0x28>
     17a:	22 30       	cpi	r18, 0x02	; 2
     17c:	31 05       	cpc	r19, r1
     17e:	69 f0       	breq	.+26     	; 0x19a <CALLBACK_USB_GetDescriptor+0x32>
     180:	35 c0       	rjmp	.+106    	; 0x1ec <CALLBACK_USB_GetDescriptor+0x84>
     182:	21 32       	cpi	r18, 0x21	; 33
     184:	31 05       	cpc	r19, r1
     186:	41 f1       	breq	.+80     	; 0x1d8 <CALLBACK_USB_GetDescriptor+0x70>
     188:	22 32       	cpi	r18, 0x22	; 34
     18a:	31 05       	cpc	r19, r1
     18c:	51 f1       	breq	.+84     	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x7a>
     18e:	2e c0       	rjmp	.+92     	; 0x1ec <CALLBACK_USB_GetDescriptor+0x84>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     190:	82 e1       	ldi	r24, 0x12	; 18
     192:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     194:	25 ef       	ldi	r18, 0xF5	; 245
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	32 c0       	rjmp	.+100    	; 0x1fe <CALLBACK_USB_GetDescriptor+0x96>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     19a:	8f e5       	ldi	r24, 0x5F	; 95
     19c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     19e:	26 e9       	ldi	r18, 0x96	; 150
     1a0:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1a2:	2d c0       	rjmp	.+90     	; 0x1fe <CALLBACK_USB_GetDescriptor+0x96>
		case DTYPE_String:
			switch (DescriptorNumber)
     1a4:	99 27       	eor	r25, r25
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	91 05       	cpc	r25, r1
     1aa:	51 f0       	breq	.+20     	; 0x1c0 <CALLBACK_USB_GetDescriptor+0x58>
     1ac:	18 f0       	brcs	.+6      	; 0x1b4 <CALLBACK_USB_GetDescriptor+0x4c>
     1ae:	02 97       	sbiw	r24, 0x02	; 2
     1b0:	69 f0       	breq	.+26     	; 0x1cc <CALLBACK_USB_GetDescriptor+0x64>
     1b2:	21 c0       	rjmp	.+66     	; 0x1f6 <CALLBACK_USB_GetDescriptor+0x8e>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1b4:	e2 e9       	ldi	r30, 0x92	; 146
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	84 91       	lpm	r24, Z
     1ba:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     1bc:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     1be:	1f c0       	rjmp	.+62     	; 0x1fe <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1c0:	e8 e8       	ldi	r30, 0x88	; 136
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	84 91       	lpm	r24, Z
     1c6:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     1c8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     1ca:	19 c0       	rjmp	.+50     	; 0x1fe <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1cc:	e4 e7       	ldi	r30, 0x74	; 116
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	84 91       	lpm	r24, Z
     1d2:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1d4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1d6:	13 c0       	rjmp	.+38     	; 0x1fe <CALLBACK_USB_GetDescriptor+0x96>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     1d8:	89 e0       	ldi	r24, 0x09	; 9
     1da:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
     1dc:	25 ee       	ldi	r18, 0xE5	; 229
     1de:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     1e0:	0e c0       	rjmp	.+28     	; 0x1fe <CALLBACK_USB_GetDescriptor+0x96>
		case HID_DTYPE_Report:
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
     1e2:	84 e2       	ldi	r24, 0x24	; 36
     1e4:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
     1e6:	27 e0       	ldi	r18, 0x07	; 7
     1e8:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(MouseReport);
			break;
     1ea:	09 c0       	rjmp	.+18     	; 0x1fe <CALLBACK_USB_GetDescriptor+0x96>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	04 c0       	rjmp	.+8      	; 0x1fe <CALLBACK_USB_GetDescriptor+0x96>
	uint16_t    Size    = NO_DESCRIPTOR;
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	30 e0       	ldi	r19, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
     1fe:	fa 01       	movw	r30, r20
     200:	31 83       	std	Z+1, r19	; 0x01
     202:	20 83       	st	Z, r18
	return Size;
}
     204:	08 95       	ret

00000206 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	ec 01       	movw	r28, r24
     20c:	fc 01       	movw	r30, r24
     20e:	70 96       	adiw	r30, 0x10	; 16
     210:	8b e0       	ldi	r24, 0x0B	; 11
     212:	df 01       	movw	r26, r30
     214:	1d 92       	st	X+, r1
     216:	8a 95       	dec	r24
     218:	e9 f7       	brne	.-6      	; 0x214 <CDC_Device_ConfigureEndpoints+0xe>
     21a:	82 e0       	ldi	r24, 0x02	; 2
     21c:	8c 83       	std	Y+4, r24	; 0x04
     21e:	89 87       	std	Y+9, r24	; 0x09
     220:	83 e0       	ldi	r24, 0x03	; 3
     222:	8e 87       	std	Y+14, r24	; 0x0e
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	ce 01       	movw	r24, r28
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	6a d5       	rcall	.+2772   	; 0xd00 <Endpoint_ConfigureEndpointTable>
     22c:	88 23       	and	r24, r24
     22e:	51 f0       	breq	.+20     	; 0x244 <CDC_Device_ConfigureEndpoints+0x3e>
     230:	61 e0       	ldi	r22, 0x01	; 1
     232:	ce 01       	movw	r24, r28
     234:	06 96       	adiw	r24, 0x06	; 6
     236:	64 d5       	rcall	.+2760   	; 0xd00 <Endpoint_ConfigureEndpointTable>
     238:	88 23       	and	r24, r24
     23a:	21 f0       	breq	.+8      	; 0x244 <CDC_Device_ConfigureEndpoints+0x3e>
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	ce 01       	movw	r24, r28
     240:	0b 96       	adiw	r24, 0x0b	; 11
     242:	5e d5       	rcall	.+2748   	; 0xd00 <Endpoint_ConfigureEndpointTable>
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <CDC_Device_Flush>:
     24a:	fc 01       	movw	r30, r24
     24c:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <USB_DeviceState>
     250:	94 30       	cpi	r25, 0x04	; 4
     252:	09 f5       	brne	.+66     	; 0x296 <CDC_Device_Flush+0x4c>
     254:	84 89       	ldd	r24, Z+20	; 0x14
     256:	95 89       	ldd	r25, Z+21	; 0x15
     258:	a6 89       	ldd	r26, Z+22	; 0x16
     25a:	b7 89       	ldd	r27, Z+23	; 0x17
     25c:	89 2b       	or	r24, r25
     25e:	8a 2b       	or	r24, r26
     260:	8b 2b       	or	r24, r27
     262:	d9 f0       	breq	.+54     	; 0x29a <CDC_Device_Flush+0x50>
     264:	81 81       	ldd	r24, Z+1	; 0x01
     266:	8f 70       	andi	r24, 0x0F	; 15
     268:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     26c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
     270:	88 23       	and	r24, r24
     272:	b1 f0       	breq	.+44     	; 0x2a0 <CDC_Device_Flush+0x56>
     274:	e8 ee       	ldi	r30, 0xE8	; 232
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	90 81       	ld	r25, Z
     27a:	80 81       	ld	r24, Z
     27c:	8e 77       	andi	r24, 0x7E	; 126
     27e:	80 83       	st	Z, r24
     280:	95 fd       	sbrc	r25, 5
     282:	0d c0       	rjmp	.+26     	; 0x29e <CDC_Device_Flush+0x54>
     284:	b0 d5       	rcall	.+2912   	; 0xde6 <Endpoint_WaitUntilReady>
     286:	81 11       	cpse	r24, r1
     288:	0b c0       	rjmp	.+22     	; 0x2a0 <CDC_Device_Flush+0x56>
     28a:	e8 ee       	ldi	r30, 0xE8	; 232
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	90 81       	ld	r25, Z
     290:	9e 77       	andi	r25, 0x7E	; 126
     292:	90 83       	st	Z, r25
     294:	08 95       	ret
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	08 95       	ret
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	08 95       	ret
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	08 95       	ret

000002a2 <CDC_Device_USBTask>:
     2a2:	fc 01       	movw	r30, r24
     2a4:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <USB_DeviceState>
     2a8:	94 30       	cpi	r25, 0x04	; 4
     2aa:	91 f4       	brne	.+36     	; 0x2d0 <CDC_Device_USBTask+0x2e>
     2ac:	84 89       	ldd	r24, Z+20	; 0x14
     2ae:	95 89       	ldd	r25, Z+21	; 0x15
     2b0:	a6 89       	ldd	r26, Z+22	; 0x16
     2b2:	b7 89       	ldd	r27, Z+23	; 0x17
     2b4:	89 2b       	or	r24, r25
     2b6:	8a 2b       	or	r24, r26
     2b8:	8b 2b       	or	r24, r27
     2ba:	51 f0       	breq	.+20     	; 0x2d0 <CDC_Device_USBTask+0x2e>
     2bc:	81 81       	ldd	r24, Z+1	; 0x01
     2be:	8f 70       	andi	r24, 0x0F	; 15
     2c0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     2c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     2c8:	80 ff       	sbrs	r24, 0
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <CDC_Device_USBTask+0x2e>
     2cc:	cf 01       	movw	r24, r30
     2ce:	bd cf       	rjmp	.-134    	; 0x24a <CDC_Device_Flush>
     2d0:	08 95       	ret

000002d2 <CDC_Device_ReceiveByte>:
     2d2:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <USB_DeviceState>
     2d6:	24 30       	cpi	r18, 0x04	; 4
     2d8:	39 f5       	brne	.+78     	; 0x328 <__stack+0x29>
     2da:	fc 01       	movw	r30, r24
     2dc:	44 89       	ldd	r20, Z+20	; 0x14
     2de:	55 89       	ldd	r21, Z+21	; 0x15
     2e0:	66 89       	ldd	r22, Z+22	; 0x16
     2e2:	77 89       	ldd	r23, Z+23	; 0x17
     2e4:	45 2b       	or	r20, r21
     2e6:	46 2b       	or	r20, r22
     2e8:	47 2b       	or	r20, r23
     2ea:	09 f1       	breq	.+66     	; 0x32e <__stack+0x2f>
     2ec:	86 81       	ldd	r24, Z+6	; 0x06
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     2f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     2f8:	82 ff       	sbrs	r24, 2
     2fa:	1c c0       	rjmp	.+56     	; 0x334 <__stack+0x35>
     2fc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
     300:	88 23       	and	r24, r24
     302:	21 f0       	breq	.+8      	; 0x30c <__stack+0xd>
     304:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	02 c0       	rjmp	.+4      	; 0x310 <__stack+0x11>
     30c:	2f ef       	ldi	r18, 0xFF	; 255
     30e:	3f ef       	ldi	r19, 0xFF	; 255
     310:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
     314:	81 11       	cpse	r24, r1
     316:	11 c0       	rjmp	.+34     	; 0x33a <__stack+0x3b>
     318:	e8 ee       	ldi	r30, 0xE8	; 232
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	8b 77       	andi	r24, 0x7B	; 123
     320:	80 83       	st	Z, r24
     322:	82 2f       	mov	r24, r18
     324:	93 2f       	mov	r25, r19
     326:	08 95       	ret
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	9f ef       	ldi	r25, 0xFF	; 255
     32c:	08 95       	ret
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	9f ef       	ldi	r25, 0xFF	; 255
     332:	08 95       	ret
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	9f ef       	ldi	r25, 0xFF	; 255
     338:	08 95       	ret
     33a:	82 2f       	mov	r24, r18
     33c:	93 2f       	mov	r25, r19
     33e:	08 95       	ret

00000340 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     340:	08 95       	ret

00000342 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     348:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	if (!(Endpoint_IsSETUPReceived()))
     34c:	93 ff       	sbrs	r25, 3
     34e:	97 c0       	rjmp	.+302    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     350:	20 81       	ld	r18, Z
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_ControlRequest+0x4>
     358:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <USB_ControlRequest+0x5>
     35c:	82 17       	cp	r24, r18
     35e:	93 07       	cpc	r25, r19
     360:	09 f0       	breq	.+2      	; 0x364 <CDC_Device_ProcessControlRequest+0x22>
     362:	8d c0       	rjmp	.+282    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     364:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
     366:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <USB_ControlRequest+0x1>
     36a:	81 32       	cpi	r24, 0x21	; 33
     36c:	59 f0       	breq	.+22     	; 0x384 <CDC_Device_ProcessControlRequest+0x42>
     36e:	18 f4       	brcc	.+6      	; 0x376 <CDC_Device_ProcessControlRequest+0x34>
     370:	80 32       	cpi	r24, 0x20	; 32
     372:	b9 f1       	breq	.+110    	; 0x3e2 <CDC_Device_ProcessControlRequest+0xa0>
     374:	84 c0       	rjmp	.+264    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     376:	82 32       	cpi	r24, 0x22	; 34
     378:	09 f4       	brne	.+2      	; 0x37c <CDC_Device_ProcessControlRequest+0x3a>
     37a:	5f c0       	rjmp	.+190    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     37c:	83 32       	cpi	r24, 0x23	; 35
     37e:	09 f4       	brne	.+2      	; 0x382 <CDC_Device_ProcessControlRequest+0x40>
     380:	70 c0       	rjmp	.+224    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     382:	7d c0       	rjmp	.+250    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     384:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_ControlRequest>
     388:	81 3a       	cpi	r24, 0xA1	; 161
     38a:	09 f0       	breq	.+2      	; 0x38e <CDC_Device_ProcessControlRequest+0x4c>
     38c:	78 c0       	rjmp	.+240    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     38e:	e8 ee       	ldi	r30, 0xE8	; 232
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	87 7f       	andi	r24, 0xF7	; 247
     396:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     398:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     39a:	80 ff       	sbrs	r24, 0
     39c:	fd cf       	rjmp	.-6      	; 0x398 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     39e:	8c 89       	ldd	r24, Y+20	; 0x14
     3a0:	9d 89       	ldd	r25, Y+21	; 0x15
     3a2:	ae 89       	ldd	r26, Y+22	; 0x16
     3a4:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     3a6:	e1 ef       	ldi	r30, 0xF1	; 241
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 83       	st	Z, r24
				UEDATX = (Data >> 8);
     3ac:	49 2f       	mov	r20, r25
     3ae:	5a 2f       	mov	r21, r26
     3b0:	6b 2f       	mov	r22, r27
     3b2:	77 27       	eor	r23, r23
     3b4:	40 83       	st	Z, r20
				UEDATX = (Data >> 16);
     3b6:	ad 01       	movw	r20, r26
     3b8:	66 27       	eor	r22, r22
     3ba:	77 27       	eor	r23, r23
     3bc:	40 83       	st	Z, r20
				UEDATX = (Data >> 24);
     3be:	8b 2f       	mov	r24, r27
     3c0:	99 27       	eor	r25, r25
     3c2:	aa 27       	eor	r26, r26
     3c4:	bb 27       	eor	r27, r27
     3c6:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     3c8:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3ca:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     3cc:	89 8d       	ldd	r24, Y+25	; 0x19
     3ce:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     3d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     3d2:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3d4:	e8 ee       	ldi	r30, 0xE8	; 232
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8e 77       	andi	r24, 0x7E	; 126
     3dc:	80 83       	st	Z, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     3de:	df d4       	rcall	.+2494   	; 0xd9e <Endpoint_ClearStatusStage>
     3e0:	4e c0       	rjmp	.+156    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     3e2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_ControlRequest>
     3e6:	81 32       	cpi	r24, 0x21	; 33
     3e8:	09 f0       	breq	.+2      	; 0x3ec <CDC_Device_ProcessControlRequest+0xaa>
     3ea:	49 c0       	rjmp	.+146    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3ec:	e8 ee       	ldi	r30, 0xE8	; 232
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	87 7f       	andi	r24, 0xF7	; 247
     3f4:	80 83       	st	Z, r24
     3f6:	05 c0       	rjmp	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     3f8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>
     3fc:	88 23       	and	r24, r24
     3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	3e c0       	rjmp	.+124    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     402:	80 81       	ld	r24, Z
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     404:	82 ff       	sbrs	r24, 2
     406:	f8 cf       	rjmp	.-16     	; 0x3f8 <CDC_Device_ProcessControlRequest+0xb6>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     408:	e1 ef       	ldi	r30, 0xF1	; 241
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	30 81       	ld	r19, Z
				Data.Bytes[1] = UEDATX;
     40e:	20 81       	ld	r18, Z
				Data.Bytes[2] = UEDATX;
     410:	90 81       	ld	r25, Z
				Data.Bytes[3] = UEDATX;
     412:	80 81       	ld	r24, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     414:	3c 8b       	std	Y+20, r19	; 0x14
     416:	2d 8b       	std	Y+21, r18	; 0x15
     418:	9e 8b       	std	Y+22, r25	; 0x16
     41a:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     41c:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     41e:	88 8f       	std	Y+24, r24	; 0x18
     420:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     422:	89 8f       	std	Y+25, r24	; 0x19
     424:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     426:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     428:	e8 ee       	ldi	r30, 0xE8	; 232
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	8b 77       	andi	r24, 0x7B	; 123

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     430:	80 83       	st	Z, r24

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     432:	b5 d4       	rcall	.+2410   	; 0xd9e <Endpoint_ClearStatusStage>
     434:	ce 01       	movw	r24, r28
     436:	84 df       	rcall	.-248    	; 0x340 <CDC_Device_Event_Stub>
     438:	22 c0       	rjmp	.+68     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     43a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_ControlRequest>
     43e:	81 32       	cpi	r24, 0x21	; 33
     440:	f1 f4       	brne	.+60     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     442:	e8 ee       	ldi	r30, 0xE8	; 232
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     44a:	80 83       	st	Z, r24
     44c:	a8 d4       	rcall	.+2384   	; 0xd9e <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     44e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USB_ControlRequest+0x2>
     452:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <USB_ControlRequest+0x3>
     456:	99 8b       	std	Y+17, r25	; 0x11
     458:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     45a:	ce 01       	movw	r24, r28
     45c:	0e 94 89 0c 	call	0x1912	; 0x1912 <EVENT_CDC_Device_ControLineStateChanged>
     460:	0e c0       	rjmp	.+28     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     462:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_ControlRequest>
     466:	81 32       	cpi	r24, 0x21	; 33
     468:	51 f4       	brne	.+20     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     46a:	e8 ee       	ldi	r30, 0xE8	; 232
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	80 81       	ld	r24, Z
     470:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     472:	80 83       	st	Z, r24

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     474:	94 d4       	rcall	.+2344   	; 0xd9e <Endpoint_ClearStatusStage>
     476:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <USB_ControlRequest+0x2>
     47a:	ce 01       	movw	r24, r28
     47c:	61 df       	rcall	.-318    	; 0x340 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     484:	3f 92       	push	r3
     486:	4f 92       	push	r4
     488:	5f 92       	push	r5
     48a:	6f 92       	push	r6
     48c:	7f 92       	push	r7
     48e:	8f 92       	push	r8
     490:	9f 92       	push	r9
     492:	af 92       	push	r10
     494:	bf 92       	push	r11
     496:	cf 92       	push	r12
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <HID_Device_ProcessControlRequest+0x24>
     4a8:	1f 92       	push	r1
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     4b0:	ed b6       	in	r14, 0x3d	; 61
     4b2:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     4b8:	83 ff       	sbrs	r24, 3
     4ba:	17 c1       	rjmp	.+558    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     4bc:	f6 01       	movw	r30, r12
     4be:	80 81       	ld	r24, Z
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <USB_ControlRequest+0x4>
     4c6:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <USB_ControlRequest+0x5>
     4ca:	28 17       	cp	r18, r24
     4cc:	39 07       	cpc	r19, r25
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <HID_Device_ProcessControlRequest+0x4e>
     4d0:	0c c1       	rjmp	.+536    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
	  return;

	switch (USB_ControlRequest.bRequest)
     4d2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <USB_ControlRequest+0x1>
     4d6:	83 30       	cpi	r24, 0x03	; 3
     4d8:	09 f4       	brne	.+2      	; 0x4dc <HID_Device_ProcessControlRequest+0x58>
     4da:	a4 c0       	rjmp	.+328    	; 0x624 <HID_Device_ProcessControlRequest+0x1a0>
     4dc:	30 f4       	brcc	.+12     	; 0x4ea <HID_Device_ProcessControlRequest+0x66>
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	71 f0       	breq	.+28     	; 0x4fe <HID_Device_ProcessControlRequest+0x7a>
     4e2:	82 30       	cpi	r24, 0x02	; 2
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <HID_Device_ProcessControlRequest+0x64>
     4e6:	e6 c0       	rjmp	.+460    	; 0x6b4 <HID_Device_ProcessControlRequest+0x230>
     4e8:	00 c1       	rjmp	.+512    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
     4ea:	8a 30       	cpi	r24, 0x0A	; 10
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <HID_Device_ProcessControlRequest+0x6c>
     4ee:	c6 c0       	rjmp	.+396    	; 0x67c <HID_Device_ProcessControlRequest+0x1f8>
     4f0:	8b 30       	cpi	r24, 0x0B	; 11
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <HID_Device_ProcessControlRequest+0x72>
     4f4:	af c0       	rjmp	.+350    	; 0x654 <HID_Device_ProcessControlRequest+0x1d0>
     4f6:	89 30       	cpi	r24, 0x09	; 9
     4f8:	09 f0       	breq	.+2      	; 0x4fc <HID_Device_ProcessControlRequest+0x78>
     4fa:	f7 c0       	rjmp	.+494    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
     4fc:	54 c0       	rjmp	.+168    	; 0x5a6 <HID_Device_ProcessControlRequest+0x122>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     4fe:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_ControlRequest>
     502:	81 3a       	cpi	r24, 0xA1	; 161
     504:	09 f0       	breq	.+2      	; 0x508 <HID_Device_ProcessControlRequest+0x84>
     506:	f1 c0       	rjmp	.+482    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
			{
     508:	ad b6       	in	r10, 0x3d	; 61
     50a:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = 0;
     50c:	1a 82       	std	Y+2, r1	; 0x02
     50e:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     510:	e1 e5       	ldi	r30, 0x51	; 81
     512:	f1 e0       	ldi	r31, 0x01	; 1
     514:	82 81       	ldd	r24, Z+2	; 0x02
     516:	13 81       	ldd	r17, Z+3	; 0x03
     518:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     51a:	f6 01       	movw	r30, r12
     51c:	80 85       	ldd	r24, Z+8	; 0x08
     51e:	48 2f       	mov	r20, r24
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	8d b7       	in	r24, 0x3d	; 61
     524:	9e b7       	in	r25, 0x3e	; 62
     526:	84 1b       	sub	r24, r20
     528:	95 0b       	sbc	r25, r21
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	9e bf       	out	0x3e, r25	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	8d bf       	out	0x3d, r24	; 61
     534:	ed b7       	in	r30, 0x3d	; 61
     536:	fe b7       	in	r31, 0x3e	; 62
     538:	31 96       	adiw	r30, 0x01	; 1
     53a:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	cf 01       	movw	r24, r30
     542:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     546:	4f ef       	ldi	r20, 0xFF	; 255
     548:	41 0f       	add	r20, r17
     54a:	8e 01       	movw	r16, r28
     54c:	0f 5f       	subi	r16, 0xFF	; 255
     54e:	1f 4f       	sbci	r17, 0xFF	; 255
     550:	94 01       	movw	r18, r8
     552:	be 01       	movw	r22, r28
     554:	6d 5f       	subi	r22, 0xFD	; 253
     556:	7f 4f       	sbci	r23, 0xFF	; 255
     558:	c6 01       	movw	r24, r12
     55a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     55e:	f6 01       	movw	r30, r12
     560:	86 81       	ldd	r24, Z+6	; 0x06
     562:	97 81       	ldd	r25, Z+7	; 0x07
     564:	00 97       	sbiw	r24, 0x00	; 0
     566:	29 f0       	breq	.+10     	; 0x572 <HID_Device_ProcessControlRequest+0xee>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     568:	40 85       	ldd	r20, Z+8	; 0x08
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	b4 01       	movw	r22, r8
     56e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     572:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     576:	e8 ee       	ldi	r30, 0xE8	; 232
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	87 7f       	andi	r24, 0xF7	; 247
     57e:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     584:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     588:	69 81       	ldd	r22, Y+1	; 0x01
     58a:	7a 81       	ldd	r23, Y+2	; 0x02
     58c:	c4 01       	movw	r24, r8
     58e:	f7 d1       	rcall	.+1006   	; 0x97e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     590:	e8 ee       	ldi	r30, 0xE8	; 232
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	8b 77       	andi	r24, 0x7B	; 123
     598:	80 83       	st	Z, r24
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	be be       	out	0x3e, r11	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	ad be       	out	0x3d, r10	; 61
     5a4:	a2 c0       	rjmp	.+324    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     5a6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_ControlRequest>
     5aa:	81 32       	cpi	r24, 0x21	; 33
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <HID_Device_ProcessControlRequest+0x12c>
     5ae:	9d c0       	rjmp	.+314    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
			{
     5b0:	6d b6       	in	r6, 0x3d	; 61
     5b2:	7e b6       	in	r7, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
     5b4:	e1 e5       	ldi	r30, 0x51	; 81
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	06 81       	ldd	r16, Z+6	; 0x06
     5ba:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     5bc:	52 80       	ldd	r5, Z+2	; 0x02
     5be:	43 80       	ldd	r4, Z+3	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     5c0:	8d b7       	in	r24, 0x3d	; 61
     5c2:	9e b7       	in	r25, 0x3e	; 62
     5c4:	80 1b       	sub	r24, r16
     5c6:	91 0b       	sbc	r25, r17
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	9e bf       	out	0x3e, r25	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	8d bf       	out	0x3d, r24	; 61
     5d2:	ed b7       	in	r30, 0x3d	; 61
     5d4:	fe b7       	in	r31, 0x3e	; 62
     5d6:	31 96       	adiw	r30, 0x01	; 1
     5d8:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     5da:	0f 2e       	mov	r0, r31
     5dc:	f8 ee       	ldi	r31, 0xE8	; 232
     5de:	af 2e       	mov	r10, r31
     5e0:	b1 2c       	mov	r11, r1
     5e2:	f0 2d       	mov	r31, r0
     5e4:	f5 01       	movw	r30, r10
     5e6:	80 81       	ld	r24, Z
     5e8:	87 7f       	andi	r24, 0xF7	; 247
     5ea:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     5ec:	b8 01       	movw	r22, r16
     5ee:	c4 01       	movw	r24, r8
     5f0:	3f d2       	rcall	.+1150   	; 0xa70 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5f2:	f5 01       	movw	r30, r10
     5f4:	80 81       	ld	r24, Z
     5f6:	8e 77       	andi	r24, 0x7E	; 126
     5f8:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	51 10       	cpse	r5, r1
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <HID_Device_ProcessControlRequest+0x17e>
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	02 1b       	sub	r16, r18
     606:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     608:	28 0d       	add	r18, r8
     60a:	39 1d       	adc	r19, r9

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     60c:	4f ef       	ldi	r20, 0xFF	; 255
     60e:	44 0d       	add	r20, r4
     610:	65 2d       	mov	r22, r5
     612:	c6 01       	movw	r24, r12
     614:	0e 94 88 0c 	call	0x1910	; 0x1910 <CALLBACK_HID_Device_ProcessHIDReport>
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	7e be       	out	0x3e, r7	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	6d be       	out	0x3d, r6	; 61
     622:	63 c0       	rjmp	.+198    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     624:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_ControlRequest>
     628:	81 3a       	cpi	r24, 0xA1	; 161
     62a:	09 f0       	breq	.+2      	; 0x62e <HID_Device_ProcessControlRequest+0x1aa>
     62c:	5e c0       	rjmp	.+188    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     62e:	e8 ee       	ldi	r30, 0xE8	; 232
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	87 7f       	andi	r24, 0xF7	; 247
     636:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     638:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     63a:	80 ff       	sbrs	r24, 0
     63c:	fd cf       	rjmp	.-6      	; 0x638 <HID_Device_ProcessControlRequest+0x1b4>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     63e:	f6 01       	movw	r30, r12
     640:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     642:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     646:	e8 ee       	ldi	r30, 0xE8	; 232
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     64e:	80 83       	st	Z, r24
     650:	a6 d3       	rcall	.+1868   	; 0xd9e <Endpoint_ClearStatusStage>
     652:	4b c0       	rjmp	.+150    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     654:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_ControlRequest>
     658:	81 32       	cpi	r24, 0x21	; 33
     65a:	09 f0       	breq	.+2      	; 0x65e <HID_Device_ProcessControlRequest+0x1da>
     65c:	46 c0       	rjmp	.+140    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     65e:	e8 ee       	ldi	r30, 0xE8	; 232
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     666:	80 83       	st	Z, r24
     668:	9a d3       	rcall	.+1844   	; 0xd9e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     66a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <USB_ControlRequest+0x2>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	91 11       	cpse	r25, r1
     672:	01 c0       	rjmp	.+2      	; 0x676 <HID_Device_ProcessControlRequest+0x1f2>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	f6 01       	movw	r30, r12
     678:	81 87       	std	Z+9, r24	; 0x09
     67a:	37 c0       	rjmp	.+110    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     67c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_ControlRequest>
     680:	81 32       	cpi	r24, 0x21	; 33
     682:	99 f5       	brne	.+102    	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
     684:	e8 ee       	ldi	r30, 0xE8	; 232
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	80 81       	ld	r24, Z
     68a:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     68c:	80 83       	st	Z, r24
     68e:	87 d3       	rcall	.+1806   	; 0xd9e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     690:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USB_ControlRequest+0x2>
     694:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <USB_ControlRequest+0x3>
     698:	88 27       	eor	r24, r24
     69a:	00 24       	eor	r0, r0
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	00 1c       	adc	r0, r0
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	00 1c       	adc	r0, r0
     6a8:	89 2f       	mov	r24, r25
     6aa:	90 2d       	mov	r25, r0
     6ac:	f6 01       	movw	r30, r12
     6ae:	95 87       	std	Z+13, r25	; 0x0d
     6b0:	84 87       	std	Z+12, r24	; 0x0c
     6b2:	1b c0       	rjmp	.+54     	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     6b4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_ControlRequest>
     6b8:	81 3a       	cpi	r24, 0xA1	; 161
     6ba:	b9 f4       	brne	.+46     	; 0x6ea <HID_Device_ProcessControlRequest+0x266>
     6bc:	e8 ee       	ldi	r30, 0xE8	; 232
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	87 7f       	andi	r24, 0xF7	; 247
     6c4:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6c6:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     6c8:	80 ff       	sbrs	r24, 0
     6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <HID_Device_ProcessControlRequest+0x242>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     6cc:	f6 01       	movw	r30, r12
     6ce:	84 85       	ldd	r24, Z+12	; 0x0c
     6d0:	95 85       	ldd	r25, Z+13	; 0x0d
     6d2:	96 95       	lsr	r25
     6d4:	87 95       	ror	r24
     6d6:	96 95       	lsr	r25
     6d8:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6da:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6de:	e8 ee       	ldi	r30, 0xE8	; 232
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     6e6:	80 83       	st	Z, r24
     6e8:	5a d3       	rcall	.+1716   	; 0xd9e <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	fe be       	out	0x3e, r15	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	ed be       	out	0x3d, r14	; 61
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	df 90       	pop	r13
     708:	cf 90       	pop	r12
     70a:	bf 90       	pop	r11
     70c:	af 90       	pop	r10
     70e:	9f 90       	pop	r9
     710:	8f 90       	pop	r8
     712:	7f 90       	pop	r7
     714:	6f 90       	pop	r6
     716:	5f 90       	pop	r5
     718:	4f 90       	pop	r4
     71a:	3f 90       	pop	r3
     71c:	08 95       	ret

0000071e <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     71e:	fc 01       	movw	r30, r24
     720:	39 96       	adiw	r30, 0x09	; 9
     722:	27 e0       	ldi	r18, 0x07	; 7
     724:	df 01       	movw	r26, r30
     726:	1d 92       	st	X+, r1
     728:	2a 95       	dec	r18
     72a:	e9 f7       	brne	.-6      	; 0x726 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     72c:	21 e0       	ldi	r18, 0x01	; 1
     72e:	fc 01       	movw	r30, r24
     730:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     732:	24 ef       	ldi	r18, 0xF4	; 244
     734:	31 e0       	ldi	r19, 0x01	; 1
     736:	35 87       	std	Z+13, r19	; 0x0d
     738:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     73a:	23 e0       	ldi	r18, 0x03	; 3
     73c:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	de c2       	rjmp	.+1468   	; 0xd00 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
     744:	08 95       	ret

00000746 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     746:	5f 92       	push	r5
     748:	6f 92       	push	r6
     74a:	7f 92       	push	r7
     74c:	8f 92       	push	r8
     74e:	9f 92       	push	r9
     750:	af 92       	push	r10
     752:	bf 92       	push	r11
     754:	cf 92       	push	r12
     756:	df 92       	push	r13
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	00 d0       	rcall	.+0      	; 0x766 <HID_Device_USBTask+0x20>
     766:	1f 92       	push	r1
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     76e:	ad b6       	in	r10, 0x3d	; 61
     770:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     772:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>
     776:	84 30       	cpi	r24, 0x04	; 4
     778:	09 f0       	breq	.+2      	; 0x77c <HID_Device_USBTask+0x36>
     77a:	8d c0       	rjmp	.+282    	; 0x896 <HID_Device_USBTask+0x150>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     77c:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     780:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     784:	f7 01       	movw	r30, r14
     786:	22 85       	ldd	r18, Z+10	; 0x0a
     788:	33 85       	ldd	r19, Z+11	; 0x0b
     78a:	28 17       	cp	r18, r24
     78c:	39 07       	cpc	r19, r25
     78e:	09 f4       	brne	.+2      	; 0x792 <HID_Device_USBTask+0x4c>
     790:	82 c0       	rjmp	.+260    	; 0x896 <HID_Device_USBTask+0x150>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     792:	81 81       	ldd	r24, Z+1	; 0x01
     794:	8f 70       	andi	r24, 0x0F	; 15
     796:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     79a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     79e:	85 ff       	sbrs	r24, 5
     7a0:	7a c0       	rjmp	.+244    	; 0x896 <HID_Device_USBTask+0x150>
	{
     7a2:	8d b6       	in	r8, 0x3d	; 61
     7a4:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     7a6:	40 85       	ldd	r20, Z+8	; 0x08
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	8d b7       	in	r24, 0x3d	; 61
     7ac:	9e b7       	in	r25, 0x3e	; 62
     7ae:	84 1b       	sub	r24, r20
     7b0:	95 0b       	sbc	r25, r21
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	9e bf       	out	0x3e, r25	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	8d bf       	out	0x3d, r24	; 61
     7bc:	ed b7       	in	r30, 0x3d	; 61
     7be:	fe b7       	in	r31, 0x3e	; 62
     7c0:	31 96       	adiw	r30, 0x01	; 1
     7c2:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     7c4:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     7c6:	1a 82       	std	Y+2, r1	; 0x02
     7c8:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	cf 01       	movw	r24, r30
     7d0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     7d4:	8e 01       	movw	r16, r28
     7d6:	0f 5f       	subi	r16, 0xFF	; 255
     7d8:	1f 4f       	sbci	r17, 0xFF	; 255
     7da:	96 01       	movw	r18, r12
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	be 01       	movw	r22, r28
     7e0:	6d 5f       	subi	r22, 0xFD	; 253
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	c7 01       	movw	r24, r14
     7e6:	d6 d6       	rcall	.+3500   	; 0x1594 <CALLBACK_HID_Device_CreateHIDReport>
     7e8:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     7ea:	f7 01       	movw	r30, r14
     7ec:	84 85       	ldd	r24, Z+12	; 0x0c
     7ee:	95 85       	ldd	r25, Z+13	; 0x0d
     7f0:	89 2b       	or	r24, r25
     7f2:	41 f0       	breq	.+16     	; 0x804 <HID_Device_USBTask+0xbe>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	26 85       	ldd	r18, Z+14	; 0x0e
     7f8:	37 85       	ldd	r19, Z+15	; 0x0f
     7fa:	23 2b       	or	r18, r19
     7fc:	09 f0       	breq	.+2      	; 0x800 <HID_Device_USBTask+0xba>
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	78 2e       	mov	r7, r24
     802:	01 c0       	rjmp	.+2      	; 0x806 <HID_Device_USBTask+0xc0>
     804:	71 2c       	mov	r7, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     806:	f7 01       	movw	r30, r14
     808:	06 81       	ldd	r16, Z+6	; 0x06
     80a:	17 81       	ldd	r17, Z+7	; 0x07
     80c:	01 15       	cp	r16, r1
     80e:	11 05       	cpc	r17, r1
     810:	99 f0       	breq	.+38     	; 0x838 <HID_Device_USBTask+0xf2>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     812:	49 81       	ldd	r20, Y+1	; 0x01
     814:	5a 81       	ldd	r21, Y+2	; 0x02
     816:	b8 01       	movw	r22, r16
     818:	c6 01       	movw	r24, r12
     81a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <memcmp>
     81e:	66 24       	eor	r6, r6
     820:	63 94       	inc	r6
     822:	89 2b       	or	r24, r25
     824:	09 f4       	brne	.+2      	; 0x828 <HID_Device_USBTask+0xe2>
     826:	61 2c       	mov	r6, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     828:	f7 01       	movw	r30, r14
     82a:	40 85       	ldd	r20, Z+8	; 0x08
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	b6 01       	movw	r22, r12
     830:	c8 01       	movw	r24, r16
     832:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <memcpy>
     836:	01 c0       	rjmp	.+2      	; 0x83a <HID_Device_USBTask+0xf4>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     838:	61 2c       	mov	r6, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	9a 81       	ldd	r25, Y+2	; 0x02
     83e:	89 2b       	or	r24, r25
     840:	f1 f0       	breq	.+60     	; 0x87e <HID_Device_USBTask+0x138>
     842:	51 10       	cpse	r5, r1
     844:	04 c0       	rjmp	.+8      	; 0x84e <HID_Device_USBTask+0x108>
     846:	61 10       	cpse	r6, r1
     848:	02 c0       	rjmp	.+4      	; 0x84e <HID_Device_USBTask+0x108>
     84a:	70 fe       	sbrs	r7, 0
     84c:	18 c0       	rjmp	.+48     	; 0x87e <HID_Device_USBTask+0x138>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     84e:	f7 01       	movw	r30, r14
     850:	84 85       	ldd	r24, Z+12	; 0x0c
     852:	95 85       	ldd	r25, Z+13	; 0x0d
     854:	97 87       	std	Z+15, r25	; 0x0f
     856:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     858:	81 81       	ldd	r24, Z+1	; 0x01
     85a:	8f 70       	andi	r24, 0x0F	; 15
     85c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     860:	8b 81       	ldd	r24, Y+3	; 0x03
     862:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     864:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     868:	69 81       	ldd	r22, Y+1	; 0x01
     86a:	7a 81       	ldd	r23, Y+2	; 0x02
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	c6 01       	movw	r24, r12
     872:	29 d0       	rcall	.+82     	; 0x8c6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     874:	e8 ee       	ldi	r30, 0xE8	; 232
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	8e 77       	andi	r24, 0x7E	; 126
     87c:	80 83       	st	Z, r24
     87e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     882:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     886:	f7 01       	movw	r30, r14
     888:	93 87       	std	Z+11, r25	; 0x0b
     88a:	82 87       	std	Z+10, r24	; 0x0a
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	9e be       	out	0x3e, r9	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	8d be       	out	0x3d, r8	; 61
	}
}
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	be be       	out	0x3e, r11	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	ad be       	out	0x3d, r10	; 61
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	df 90       	pop	r13
     8b4:	cf 90       	pop	r12
     8b6:	bf 90       	pop	r11
     8b8:	af 90       	pop	r10
     8ba:	9f 90       	pop	r9
     8bc:	8f 90       	pop	r8
     8be:	7f 90       	pop	r7
     8c0:	6f 90       	pop	r6
     8c2:	5f 90       	pop	r5
     8c4:	08 95       	ret

000008c6 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8c6:	8f 92       	push	r8
     8c8:	9f 92       	push	r9
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	8c 01       	movw	r16, r24
     8e0:	eb 01       	movw	r28, r22
     8e2:	6a 01       	movw	r12, r20
     8e4:	80 d2       	rcall	.+1280   	; 0xde6 <Endpoint_WaitUntilReady>
     8e6:	81 11       	cpse	r24, r1
     8e8:	3d c0       	rjmp	.+122    	; 0x964 <Endpoint_Write_Stream_LE+0x9e>
     8ea:	c1 14       	cp	r12, r1
     8ec:	d1 04       	cpc	r13, r1
     8ee:	39 f0       	breq	.+14     	; 0x8fe <Endpoint_Write_Stream_LE+0x38>
     8f0:	f6 01       	movw	r30, r12
     8f2:	80 81       	ld	r24, Z
     8f4:	91 81       	ldd	r25, Z+1	; 0x01
     8f6:	c8 1b       	sub	r28, r24
     8f8:	d9 0b       	sbc	r29, r25
     8fa:	08 0f       	add	r16, r24
     8fc:	19 1f       	adc	r17, r25
     8fe:	20 97       	sbiw	r28, 0x00	; 0
     900:	81 f1       	breq	.+96     	; 0x962 <Endpoint_Write_Stream_LE+0x9c>
     902:	e1 2c       	mov	r14, r1
     904:	f1 2c       	mov	r15, r1
     906:	0f 2e       	mov	r0, r31
     908:	f8 ee       	ldi	r31, 0xE8	; 232
     90a:	8f 2e       	mov	r8, r31
     90c:	91 2c       	mov	r9, r1
     90e:	f0 2d       	mov	r31, r0
     910:	0f 2e       	mov	r0, r31
     912:	f1 ef       	ldi	r31, 0xF1	; 241
     914:	af 2e       	mov	r10, r31
     916:	b1 2c       	mov	r11, r1
     918:	f0 2d       	mov	r31, r0
     91a:	f4 01       	movw	r30, r8
     91c:	80 81       	ld	r24, Z
     91e:	85 fd       	sbrc	r24, 5
     920:	13 c0       	rjmp	.+38     	; 0x948 <Endpoint_Write_Stream_LE+0x82>
     922:	80 81       	ld	r24, Z
     924:	8e 77       	andi	r24, 0x7E	; 126
     926:	80 83       	st	Z, r24
     928:	c1 14       	cp	r12, r1
     92a:	d1 04       	cpc	r13, r1
     92c:	49 f0       	breq	.+18     	; 0x940 <Endpoint_Write_Stream_LE+0x7a>
     92e:	f6 01       	movw	r30, r12
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	e8 0e       	add	r14, r24
     936:	f9 1e       	adc	r15, r25
     938:	f1 82       	std	Z+1, r15	; 0x01
     93a:	e0 82       	st	Z, r14
     93c:	85 e0       	ldi	r24, 0x05	; 5
     93e:	12 c0       	rjmp	.+36     	; 0x964 <Endpoint_Write_Stream_LE+0x9e>
     940:	52 d2       	rcall	.+1188   	; 0xde6 <Endpoint_WaitUntilReady>
     942:	88 23       	and	r24, r24
     944:	51 f0       	breq	.+20     	; 0x95a <Endpoint_Write_Stream_LE+0x94>
     946:	0e c0       	rjmp	.+28     	; 0x964 <Endpoint_Write_Stream_LE+0x9e>
     948:	f8 01       	movw	r30, r16
     94a:	81 91       	ld	r24, Z+
     94c:	8f 01       	movw	r16, r30
     94e:	f5 01       	movw	r30, r10
     950:	80 83       	st	Z, r24
     952:	21 97       	sbiw	r28, 0x01	; 1
     954:	ff ef       	ldi	r31, 0xFF	; 255
     956:	ef 1a       	sub	r14, r31
     958:	ff 0a       	sbc	r15, r31
     95a:	20 97       	sbiw	r28, 0x00	; 0
     95c:	f1 f6       	brne	.-68     	; 0x91a <Endpoint_Write_Stream_LE+0x54>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	01 c0       	rjmp	.+2      	; 0x964 <Endpoint_Write_Stream_LE+0x9e>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	9f 90       	pop	r9
     97a:	8f 90       	pop	r8
     97c:	08 95       	ret

0000097e <Endpoint_Write_Control_Stream_LE>:
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <USB_ControlRequest+0x6>
     98c:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <USB_ControlRequest+0x7>
     990:	26 17       	cp	r18, r22
     992:	37 07       	cpc	r19, r23
     994:	58 f0       	brcs	.+22     	; 0x9ac <Endpoint_Write_Control_Stream_LE+0x2e>
     996:	61 15       	cp	r22, r1
     998:	71 05       	cpc	r23, r1
     99a:	39 f4       	brne	.+14     	; 0x9aa <Endpoint_Write_Control_Stream_LE+0x2c>
     99c:	e8 ee       	ldi	r30, 0xE8	; 232
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	20 81       	ld	r18, Z
     9a2:	2e 77       	andi	r18, 0x7E	; 126
     9a4:	20 83       	st	Z, r18
     9a6:	9b 01       	movw	r18, r22
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <Endpoint_Write_Control_Stream_LE+0x2e>
     9aa:	9b 01       	movw	r18, r22
     9ac:	a8 2f       	mov	r26, r24
     9ae:	b9 2f       	mov	r27, r25
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	e8 ee       	ldi	r30, 0xE8	; 232
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	62 ef       	ldi	r22, 0xF2	; 242
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	0f 2e       	mov	r0, r31
     9bc:	f1 ef       	ldi	r31, 0xF1	; 241
     9be:	ef 2e       	mov	r14, r31
     9c0:	f1 2c       	mov	r15, r1
     9c2:	f0 2d       	mov	r31, r0
     9c4:	51 e0       	ldi	r21, 0x01	; 1
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	2b c0       	rjmp	.+86     	; 0xa20 <Endpoint_Write_Control_Stream_LE+0xa2>
     9ca:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>
     9ce:	88 23       	and	r24, r24
     9d0:	f1 f1       	breq	.+124    	; 0xa4e <Endpoint_Write_Control_Stream_LE+0xd0>
     9d2:	85 30       	cpi	r24, 0x05	; 5
     9d4:	f1 f1       	breq	.+124    	; 0xa52 <Endpoint_Write_Control_Stream_LE+0xd4>
     9d6:	80 81       	ld	r24, Z
     9d8:	83 fd       	sbrc	r24, 3
     9da:	3d c0       	rjmp	.+122    	; 0xa56 <Endpoint_Write_Control_Stream_LE+0xd8>
     9dc:	80 81       	ld	r24, Z
     9de:	82 fd       	sbrc	r24, 2
     9e0:	2f c0       	rjmp	.+94     	; 0xa40 <Endpoint_Write_Control_Stream_LE+0xc2>
     9e2:	80 81       	ld	r24, Z
     9e4:	80 ff       	sbrs	r24, 0
     9e6:	1c c0       	rjmp	.+56     	; 0xa20 <Endpoint_Write_Control_Stream_LE+0xa2>
     9e8:	eb 01       	movw	r28, r22
     9ea:	88 81       	ld	r24, Y
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	21 15       	cp	r18, r1
     9f0:	31 05       	cpc	r19, r1
     9f2:	79 f0       	breq	.+30     	; 0xa12 <Endpoint_Write_Control_Stream_LE+0x94>
     9f4:	88 30       	cpi	r24, 0x08	; 8
     9f6:	91 05       	cpc	r25, r1
     9f8:	60 f4       	brcc	.+24     	; 0xa12 <Endpoint_Write_Control_Stream_LE+0x94>
     9fa:	4d 91       	ld	r20, X+
     9fc:	e7 01       	movw	r28, r14
     9fe:	48 83       	st	Y, r20
     a00:	21 50       	subi	r18, 0x01	; 1
     a02:	31 09       	sbc	r19, r1
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	21 15       	cp	r18, r1
     a08:	31 05       	cpc	r19, r1
     a0a:	19 f0       	breq	.+6      	; 0xa12 <Endpoint_Write_Control_Stream_LE+0x94>
     a0c:	88 30       	cpi	r24, 0x08	; 8
     a0e:	91 05       	cpc	r25, r1
     a10:	a1 f7       	brne	.-24     	; 0x9fa <Endpoint_Write_Control_Stream_LE+0x7c>
     a12:	45 2f       	mov	r20, r21
     a14:	08 97       	sbiw	r24, 0x08	; 8
     a16:	09 f0       	breq	.+2      	; 0xa1a <Endpoint_Write_Control_Stream_LE+0x9c>
     a18:	41 2f       	mov	r20, r17
     a1a:	80 81       	ld	r24, Z
     a1c:	8e 77       	andi	r24, 0x7E	; 126
     a1e:	80 83       	st	Z, r24
     a20:	21 15       	cp	r18, r1
     a22:	31 05       	cpc	r19, r1
     a24:	91 f6       	brne	.-92     	; 0x9ca <Endpoint_Write_Control_Stream_LE+0x4c>
     a26:	41 11       	cpse	r20, r1
     a28:	d0 cf       	rjmp	.-96     	; 0x9ca <Endpoint_Write_Control_Stream_LE+0x4c>
     a2a:	0a c0       	rjmp	.+20     	; 0xa40 <Endpoint_Write_Control_Stream_LE+0xc2>
     a2c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>
     a30:	88 23       	and	r24, r24
     a32:	99 f0       	breq	.+38     	; 0xa5a <Endpoint_Write_Control_Stream_LE+0xdc>
     a34:	85 30       	cpi	r24, 0x05	; 5
     a36:	99 f0       	breq	.+38     	; 0xa5e <Endpoint_Write_Control_Stream_LE+0xe0>
     a38:	80 81       	ld	r24, Z
     a3a:	83 ff       	sbrs	r24, 3
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <Endpoint_Write_Control_Stream_LE+0xc6>
     a3e:	11 c0       	rjmp	.+34     	; 0xa62 <Endpoint_Write_Control_Stream_LE+0xe4>
     a40:	e8 ee       	ldi	r30, 0xE8	; 232
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	82 ff       	sbrs	r24, 2
     a48:	f1 cf       	rjmp	.-30     	; 0xa2c <Endpoint_Write_Control_Stream_LE+0xae>
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	0b c0       	rjmp	.+22     	; 0xa64 <Endpoint_Write_Control_Stream_LE+0xe6>
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	09 c0       	rjmp	.+18     	; 0xa64 <Endpoint_Write_Control_Stream_LE+0xe6>
     a52:	83 e0       	ldi	r24, 0x03	; 3
     a54:	07 c0       	rjmp	.+14     	; 0xa64 <Endpoint_Write_Control_Stream_LE+0xe6>
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	05 c0       	rjmp	.+10     	; 0xa64 <Endpoint_Write_Control_Stream_LE+0xe6>
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	03 c0       	rjmp	.+6      	; 0xa64 <Endpoint_Write_Control_Stream_LE+0xe6>
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	01 c0       	rjmp	.+2      	; 0xa64 <Endpoint_Write_Control_Stream_LE+0xe6>
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	08 95       	ret

00000a70 <Endpoint_Read_Control_Stream_LE>:
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	61 15       	cp	r22, r1
     a76:	71 05       	cpc	r23, r1
     a78:	31 f5       	brne	.+76     	; 0xac6 <Endpoint_Read_Control_Stream_LE+0x56>
     a7a:	e8 ee       	ldi	r30, 0xE8	; 232
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	8b 77       	andi	r24, 0x7B	; 123
     a82:	80 83       	st	Z, r24
     a84:	3c c0       	rjmp	.+120    	; 0xafe <Endpoint_Read_Control_Stream_LE+0x8e>
     a86:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>
     a8a:	88 23       	and	r24, r24
     a8c:	09 f4       	brne	.+2      	; 0xa90 <Endpoint_Read_Control_Stream_LE+0x20>
     a8e:	3e c0       	rjmp	.+124    	; 0xb0c <Endpoint_Read_Control_Stream_LE+0x9c>
     a90:	85 30       	cpi	r24, 0x05	; 5
     a92:	09 f4       	brne	.+2      	; 0xa96 <Endpoint_Read_Control_Stream_LE+0x26>
     a94:	3d c0       	rjmp	.+122    	; 0xb10 <Endpoint_Read_Control_Stream_LE+0xa0>
     a96:	80 81       	ld	r24, Z
     a98:	83 fd       	sbrc	r24, 3
     a9a:	3c c0       	rjmp	.+120    	; 0xb14 <Endpoint_Read_Control_Stream_LE+0xa4>
     a9c:	80 81       	ld	r24, Z
     a9e:	82 ff       	sbrs	r24, 2
     aa0:	f2 cf       	rjmp	.-28     	; 0xa86 <Endpoint_Read_Control_Stream_LE+0x16>
     aa2:	44 c0       	rjmp	.+136    	; 0xb2c <Endpoint_Read_Control_Stream_LE+0xbc>
     aa4:	e9 01       	movw	r28, r18
     aa6:	88 81       	ld	r24, Y
     aa8:	8d 93       	st	X+, r24
     aaa:	61 50       	subi	r22, 0x01	; 1
     aac:	71 09       	sbc	r23, r1
     aae:	21 f0       	breq	.+8      	; 0xab8 <Endpoint_Read_Control_Stream_LE+0x48>
     ab0:	ea 01       	movw	r28, r20
     ab2:	88 81       	ld	r24, Y
     ab4:	81 11       	cpse	r24, r1
     ab6:	f6 cf       	rjmp	.-20     	; 0xaa4 <Endpoint_Read_Control_Stream_LE+0x34>
     ab8:	80 81       	ld	r24, Z
     aba:	8b 77       	andi	r24, 0x7B	; 123
     abc:	80 83       	st	Z, r24
     abe:	61 15       	cp	r22, r1
     ac0:	71 05       	cpc	r23, r1
     ac2:	49 f4       	brne	.+18     	; 0xad6 <Endpoint_Read_Control_Stream_LE+0x66>
     ac4:	1c c0       	rjmp	.+56     	; 0xafe <Endpoint_Read_Control_Stream_LE+0x8e>
     ac6:	a8 2f       	mov	r26, r24
     ac8:	b9 2f       	mov	r27, r25
     aca:	e8 ee       	ldi	r30, 0xE8	; 232
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	42 ef       	ldi	r20, 0xF2	; 242
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	21 ef       	ldi	r18, 0xF1	; 241
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>
     ada:	88 23       	and	r24, r24
     adc:	e9 f0       	breq	.+58     	; 0xb18 <Endpoint_Read_Control_Stream_LE+0xa8>
     ade:	85 30       	cpi	r24, 0x05	; 5
     ae0:	e9 f0       	breq	.+58     	; 0xb1c <Endpoint_Read_Control_Stream_LE+0xac>
     ae2:	80 81       	ld	r24, Z
     ae4:	83 fd       	sbrc	r24, 3
     ae6:	1c c0       	rjmp	.+56     	; 0xb20 <Endpoint_Read_Control_Stream_LE+0xb0>
     ae8:	80 81       	ld	r24, Z
     aea:	82 fd       	sbrc	r24, 2
     aec:	1f c0       	rjmp	.+62     	; 0xb2c <Endpoint_Read_Control_Stream_LE+0xbc>
     aee:	cb cf       	rjmp	.-106    	; 0xa86 <Endpoint_Read_Control_Stream_LE+0x16>
     af0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>
     af4:	88 23       	and	r24, r24
     af6:	b1 f0       	breq	.+44     	; 0xb24 <Endpoint_Read_Control_Stream_LE+0xb4>
     af8:	85 30       	cpi	r24, 0x05	; 5
     afa:	19 f4       	brne	.+6      	; 0xb02 <Endpoint_Read_Control_Stream_LE+0x92>
     afc:	15 c0       	rjmp	.+42     	; 0xb28 <Endpoint_Read_Control_Stream_LE+0xb8>
     afe:	e8 ee       	ldi	r30, 0xE8	; 232
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	80 81       	ld	r24, Z
     b04:	80 ff       	sbrs	r24, 0
     b06:	f4 cf       	rjmp	.-24     	; 0xaf0 <Endpoint_Read_Control_Stream_LE+0x80>
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	15 c0       	rjmp	.+42     	; 0xb36 <Endpoint_Read_Control_Stream_LE+0xc6>
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	13 c0       	rjmp	.+38     	; 0xb36 <Endpoint_Read_Control_Stream_LE+0xc6>
     b10:	83 e0       	ldi	r24, 0x03	; 3
     b12:	11 c0       	rjmp	.+34     	; 0xb36 <Endpoint_Read_Control_Stream_LE+0xc6>
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	0f c0       	rjmp	.+30     	; 0xb36 <Endpoint_Read_Control_Stream_LE+0xc6>
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	0d c0       	rjmp	.+26     	; 0xb36 <Endpoint_Read_Control_Stream_LE+0xc6>
     b1c:	83 e0       	ldi	r24, 0x03	; 3
     b1e:	0b c0       	rjmp	.+22     	; 0xb36 <Endpoint_Read_Control_Stream_LE+0xc6>
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	09 c0       	rjmp	.+18     	; 0xb36 <Endpoint_Read_Control_Stream_LE+0xc6>
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	07 c0       	rjmp	.+14     	; 0xb36 <Endpoint_Read_Control_Stream_LE+0xc6>
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	05 c0       	rjmp	.+10     	; 0xb36 <Endpoint_Read_Control_Stream_LE+0xc6>
     b2c:	ea 01       	movw	r28, r20
     b2e:	88 81       	ld	r24, Y
     b30:	81 11       	cpse	r24, r1
     b32:	b8 cf       	rjmp	.-144    	; 0xaa4 <Endpoint_Read_Control_Stream_LE+0x34>
     b34:	c1 cf       	rjmp	.-126    	; 0xab8 <Endpoint_Read_Control_Stream_LE+0x48>
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	08 95       	ret

00000b3c <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     b3c:	ef 92       	push	r14
     b3e:	ff 92       	push	r15
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     b46:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <USB_ControlRequest+0x6>
     b4a:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <USB_ControlRequest+0x7>
     b4e:	26 17       	cp	r18, r22
     b50:	37 07       	cpc	r19, r23
     b52:	58 f0       	brcs	.+22     	; 0xb6a <Endpoint_Write_Control_PStream_LE+0x2e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     b54:	61 15       	cp	r22, r1
     b56:	71 05       	cpc	r23, r1
     b58:	39 f4       	brne	.+14     	; 0xb68 <Endpoint_Write_Control_PStream_LE+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b5a:	e8 ee       	ldi	r30, 0xE8	; 232
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	20 81       	ld	r18, Z
     b60:	2e 77       	andi	r18, 0x7E	; 126
     b62:	20 83       	st	Z, r18
     b64:	9b 01       	movw	r18, r22
     b66:	01 c0       	rjmp	.+2      	; 0xb6a <Endpoint_Write_Control_PStream_LE+0x2e>
     b68:	9b 01       	movw	r18, r22
     b6a:	e8 2f       	mov	r30, r24
     b6c:	f9 2f       	mov	r31, r25
     b6e:	60 e0       	ldi	r22, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b70:	a8 ee       	ldi	r26, 0xE8	; 232
     b72:	b0 e0       	ldi	r27, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     b74:	42 ef       	ldi	r20, 0xF2	; 242
     b76:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b78:	0f 2e       	mov	r0, r31
     b7a:	f1 ef       	ldi	r31, 0xF1	; 241
     b7c:	ef 2e       	mov	r14, r31
     b7e:	f1 2c       	mov	r15, r1
     b80:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     b82:	71 e0       	ldi	r23, 0x01	; 1
     b84:	10 e0       	ldi	r17, 0x00	; 0
     b86:	2e c0       	rjmp	.+92     	; 0xbe4 <Endpoint_Write_Control_PStream_LE+0xa8>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b88:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <Endpoint_Write_Control_PStream_LE+0x56>
     b90:	40 c0       	rjmp	.+128    	; 0xc12 <Endpoint_Write_Control_PStream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b92:	85 30       	cpi	r24, 0x05	; 5
     b94:	09 f4       	brne	.+2      	; 0xb98 <Endpoint_Write_Control_PStream_LE+0x5c>
     b96:	3f c0       	rjmp	.+126    	; 0xc16 <Endpoint_Write_Control_PStream_LE+0xda>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b98:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     b9a:	83 fd       	sbrc	r24, 3
     b9c:	3e c0       	rjmp	.+124    	; 0xc1a <Endpoint_Write_Control_PStream_LE+0xde>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b9e:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     ba0:	82 fd       	sbrc	r24, 2
     ba2:	30 c0       	rjmp	.+96     	; 0xc04 <Endpoint_Write_Control_PStream_LE+0xc8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ba4:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     ba6:	80 ff       	sbrs	r24, 0
     ba8:	1d c0       	rjmp	.+58     	; 0xbe4 <Endpoint_Write_Control_PStream_LE+0xa8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     baa:	ea 01       	movw	r28, r20
     bac:	88 81       	ld	r24, Y
     bae:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     bb0:	21 15       	cp	r18, r1
     bb2:	31 05       	cpc	r19, r1
     bb4:	81 f0       	breq	.+32     	; 0xbd6 <Endpoint_Write_Control_PStream_LE+0x9a>
     bb6:	88 30       	cpi	r24, 0x08	; 8
     bb8:	91 05       	cpc	r25, r1
     bba:	68 f4       	brcc	.+26     	; 0xbd6 <Endpoint_Write_Control_PStream_LE+0x9a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     bbc:	64 91       	lpm	r22, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bbe:	e7 01       	movw	r28, r14
     bc0:	68 83       	st	Y, r22
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     bc2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     bc4:	21 50       	subi	r18, 0x01	; 1
     bc6:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     bc8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     bca:	21 15       	cp	r18, r1
     bcc:	31 05       	cpc	r19, r1
     bce:	19 f0       	breq	.+6      	; 0xbd6 <Endpoint_Write_Control_PStream_LE+0x9a>
     bd0:	88 30       	cpi	r24, 0x08	; 8
     bd2:	91 05       	cpc	r25, r1
     bd4:	99 f7       	brne	.-26     	; 0xbbc <Endpoint_Write_Control_PStream_LE+0x80>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     bd6:	67 2f       	mov	r22, r23
     bd8:	08 97       	sbiw	r24, 0x08	; 8
     bda:	09 f0       	breq	.+2      	; 0xbde <Endpoint_Write_Control_PStream_LE+0xa2>
     bdc:	61 2f       	mov	r22, r17
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bde:	8c 91       	ld	r24, X
     be0:	8e 77       	andi	r24, 0x7E	; 126
     be2:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     be4:	21 15       	cp	r18, r1
     be6:	31 05       	cpc	r19, r1
     be8:	79 f6       	brne	.-98     	; 0xb88 <Endpoint_Write_Control_PStream_LE+0x4c>
     bea:	61 11       	cpse	r22, r1
     bec:	cd cf       	rjmp	.-102    	; 0xb88 <Endpoint_Write_Control_PStream_LE+0x4c>
     bee:	0a c0       	rjmp	.+20     	; 0xc04 <Endpoint_Write_Control_PStream_LE+0xc8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     bf0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     bf4:	88 23       	and	r24, r24
     bf6:	99 f0       	breq	.+38     	; 0xc1e <Endpoint_Write_Control_PStream_LE+0xe2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     bf8:	85 30       	cpi	r24, 0x05	; 5
     bfa:	99 f0       	breq	.+38     	; 0xc22 <Endpoint_Write_Control_PStream_LE+0xe6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bfc:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     bfe:	83 ff       	sbrs	r24, 3
     c00:	03 c0       	rjmp	.+6      	; 0xc08 <Endpoint_Write_Control_PStream_LE+0xcc>
     c02:	11 c0       	rjmp	.+34     	; 0xc26 <Endpoint_Write_Control_PStream_LE+0xea>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c04:	e8 ee       	ldi	r30, 0xE8	; 232
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     c0a:	82 ff       	sbrs	r24, 2
     c0c:	f1 cf       	rjmp	.-30     	; 0xbf0 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	0b c0       	rjmp	.+22     	; 0xc28 <Endpoint_Write_Control_PStream_LE+0xec>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <Endpoint_Write_Control_PStream_LE+0xec>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     c16:	83 e0       	ldi	r24, 0x03	; 3
     c18:	07 c0       	rjmp	.+14     	; 0xc28 <Endpoint_Write_Control_PStream_LE+0xec>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <Endpoint_Write_Control_PStream_LE+0xec>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	03 c0       	rjmp	.+6      	; 0xc28 <Endpoint_Write_Control_PStream_LE+0xec>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <Endpoint_Write_Control_PStream_LE+0xec>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     c26:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	08 95       	ret

00000c34 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     c34:	8f 92       	push	r8
     c36:	9f 92       	push	r9
     c38:	bf 92       	push	r11
     c3a:	cf 92       	push	r12
     c3c:	df 92       	push	r13
     c3e:	ef 92       	push	r14
     c40:	ff 92       	push	r15
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	85 30       	cpi	r24, 0x05	; 5
     c4c:	70 f1       	brcs	.+92     	; 0xcaa <Endpoint_ConfigureEndpoint_Prv+0x76>
     c4e:	26 c0       	rjmp	.+76     	; 0xc9c <Endpoint_ConfigureEndpoint_Prv+0x68>
     c50:	29 2f       	mov	r18, r25
     c52:	2f 70       	andi	r18, 0x0F	; 15
     c54:	e7 01       	movw	r28, r14
     c56:	28 83       	st	Y, r18
     c58:	89 17       	cp	r24, r25
     c5a:	31 f0       	breq	.+12     	; 0xc68 <Endpoint_ConfigureEndpoint_Prv+0x34>
     c5c:	e8 01       	movw	r28, r16
     c5e:	78 81       	ld	r23, Y
     c60:	20 81       	ld	r18, Z
     c62:	e4 01       	movw	r28, r8
     c64:	58 81       	ld	r21, Y
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <Endpoint_ConfigureEndpoint_Prv+0x3a>
     c68:	24 2f       	mov	r18, r20
     c6a:	76 2f       	mov	r23, r22
     c6c:	5b 2d       	mov	r21, r11
     c6e:	21 ff       	sbrs	r18, 1
     c70:	12 c0       	rjmp	.+36     	; 0xc96 <Endpoint_ConfigureEndpoint_Prv+0x62>
     c72:	3c 91       	ld	r19, X
     c74:	3e 7f       	andi	r19, 0xFE	; 254
     c76:	3c 93       	st	X, r19
     c78:	30 81       	ld	r19, Z
     c7a:	3d 7f       	andi	r19, 0xFD	; 253
     c7c:	30 83       	st	Z, r19
     c7e:	3c 91       	ld	r19, X
     c80:	31 60       	ori	r19, 0x01	; 1
     c82:	3c 93       	st	X, r19
     c84:	e8 01       	movw	r28, r16
     c86:	78 83       	st	Y, r23
     c88:	20 83       	st	Z, r18
     c8a:	e4 01       	movw	r28, r8
     c8c:	58 83       	st	Y, r21
     c8e:	e6 01       	movw	r28, r12
     c90:	28 81       	ld	r18, Y
     c92:	22 23       	and	r18, r18
     c94:	44 f4       	brge	.+16     	; 0xca6 <Endpoint_ConfigureEndpoint_Prv+0x72>
     c96:	9f 5f       	subi	r25, 0xFF	; 255
     c98:	95 30       	cpi	r25, 0x05	; 5
     c9a:	d1 f6       	brne	.-76     	; 0xc50 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     c9c:	8f 70       	andi	r24, 0x0F	; 15
     c9e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	21 c0       	rjmp	.+66     	; 0xce8 <Endpoint_ConfigureEndpoint_Prv+0xb4>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	1f c0       	rjmp	.+62     	; 0xce8 <Endpoint_ConfigureEndpoint_Prv+0xb4>
     caa:	98 2f       	mov	r25, r24
     cac:	9f 70       	andi	r25, 0x0F	; 15
     cae:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     cb2:	98 2f       	mov	r25, r24
     cb4:	24 2f       	mov	r18, r20
     cb6:	76 2f       	mov	r23, r22
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	ab ee       	ldi	r26, 0xEB	; 235
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	ed ee       	ldi	r30, 0xED	; 237
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	0c ee       	ldi	r16, 0xEC	; 236
     cc4:	10 e0       	ldi	r17, 0x00	; 0
     cc6:	0f 2e       	mov	r0, r31
     cc8:	f0 ef       	ldi	r31, 0xF0	; 240
     cca:	8f 2e       	mov	r8, r31
     ccc:	91 2c       	mov	r9, r1
     cce:	f0 2d       	mov	r31, r0
     cd0:	0f 2e       	mov	r0, r31
     cd2:	fe ee       	ldi	r31, 0xEE	; 238
     cd4:	cf 2e       	mov	r12, r31
     cd6:	d1 2c       	mov	r13, r1
     cd8:	f0 2d       	mov	r31, r0
     cda:	0f 2e       	mov	r0, r31
     cdc:	f9 ee       	ldi	r31, 0xE9	; 233
     cde:	ef 2e       	mov	r14, r31
     ce0:	f1 2c       	mov	r15, r1
     ce2:	f0 2d       	mov	r31, r0
     ce4:	b1 2c       	mov	r11, r1
     ce6:	c3 cf       	rjmp	.-122    	; 0xc6e <Endpoint_ConfigureEndpoint_Prv+0x3a>
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	bf 90       	pop	r11
     cfa:	9f 90       	pop	r9
     cfc:	8f 90       	pop	r8
     cfe:	08 95       	ret

00000d00 <Endpoint_ConfigureEndpointTable>:
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	66 23       	and	r22, r22
     d0e:	e9 f1       	breq	.+122    	; 0xd8a <Endpoint_ConfigureEndpointTable+0x8a>
     d10:	06 2f       	mov	r16, r22
     d12:	c8 2f       	mov	r28, r24
     d14:	d9 2f       	mov	r29, r25
     d16:	10 e0       	ldi	r17, 0x00	; 0
     d18:	0f 2e       	mov	r0, r31
     d1a:	f6 e0       	ldi	r31, 0x06	; 6
     d1c:	ff 2e       	mov	r15, r31
     d1e:	f0 2d       	mov	r31, r0
     d20:	68 94       	set
     d22:	ee 24       	eor	r14, r14
     d24:	e1 f8       	bld	r14, 1
     d26:	58 81       	ld	r21, Y
     d28:	55 23       	and	r21, r21
     d2a:	49 f1       	breq	.+82     	; 0xd7e <Endpoint_ConfigureEndpointTable+0x7e>
     d2c:	9c 81       	ldd	r25, Y+4	; 0x04
     d2e:	e9 81       	ldd	r30, Y+1	; 0x01
     d30:	fa 81       	ldd	r31, Y+2	; 0x02
     d32:	6b 81       	ldd	r22, Y+3	; 0x03
     d34:	85 2f       	mov	r24, r21
     d36:	8f 70       	andi	r24, 0x0F	; 15
     d38:	85 30       	cpi	r24, 0x05	; 5
     d3a:	48 f5       	brcc	.+82     	; 0xd8e <Endpoint_ConfigureEndpointTable+0x8e>
     d3c:	92 30       	cpi	r25, 0x02	; 2
     d3e:	10 f4       	brcc	.+4      	; 0xd44 <Endpoint_ConfigureEndpointTable+0x44>
     d40:	4e 2d       	mov	r20, r14
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <Endpoint_ConfigureEndpointTable+0x46>
     d44:	4f 2d       	mov	r20, r15
     d46:	e9 30       	cpi	r30, 0x09	; 9
     d48:	f1 05       	cpc	r31, r1
     d4a:	50 f0       	brcs	.+20     	; 0xd60 <Endpoint_ConfigureEndpointTable+0x60>
     d4c:	28 e0       	ldi	r18, 0x08	; 8
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	9f 5f       	subi	r25, 0xFF	; 255
     d54:	22 0f       	add	r18, r18
     d56:	33 1f       	adc	r19, r19
     d58:	2e 17       	cp	r18, r30
     d5a:	3f 07       	cpc	r19, r31
     d5c:	d0 f3       	brcs	.-12     	; 0xd52 <Endpoint_ConfigureEndpointTable+0x52>
     d5e:	01 c0       	rjmp	.+2      	; 0xd62 <Endpoint_ConfigureEndpointTable+0x62>
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	92 95       	swap	r25
     d64:	90 7f       	andi	r25, 0xF0	; 240
     d66:	49 2b       	or	r20, r25
     d68:	62 95       	swap	r22
     d6a:	66 0f       	add	r22, r22
     d6c:	66 0f       	add	r22, r22
     d6e:	60 7c       	andi	r22, 0xC0	; 192
     d70:	55 1f       	adc	r21, r21
     d72:	55 27       	eor	r21, r21
     d74:	55 1f       	adc	r21, r21
     d76:	65 2b       	or	r22, r21
     d78:	5d df       	rcall	.-326    	; 0xc34 <Endpoint_ConfigureEndpoint_Prv>
     d7a:	88 23       	and	r24, r24
     d7c:	49 f0       	breq	.+18     	; 0xd90 <Endpoint_ConfigureEndpointTable+0x90>
     d7e:	1f 5f       	subi	r17, 0xFF	; 255
     d80:	25 96       	adiw	r28, 0x05	; 5
     d82:	01 13       	cpse	r16, r17
     d84:	d0 cf       	rjmp	.-96     	; 0xd26 <Endpoint_ConfigureEndpointTable+0x26>
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	03 c0       	rjmp	.+6      	; 0xd90 <Endpoint_ConfigureEndpointTable+0x90>
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	01 c0       	rjmp	.+2      	; 0xd90 <Endpoint_ConfigureEndpointTable+0x90>
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	08 95       	ret

00000d9e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     d9e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_ControlRequest>
     da2:	88 23       	and	r24, r24
     da4:	44 f0       	brlt	.+16     	; 0xdb6 <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     da6:	e8 ee       	ldi	r30, 0xE8	; 232
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	14 c0       	rjmp	.+40     	; 0xdd4 <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     dac:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>
     db0:	81 11       	cpse	r24, r1
     db2:	03 c0       	rjmp	.+6      	; 0xdba <Endpoint_ClearStatusStage+0x1c>
     db4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     db6:	e8 ee       	ldi	r30, 0xE8	; 232
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     dbc:	82 ff       	sbrs	r24, 2
     dbe:	f6 cf       	rjmp	.-20     	; 0xdac <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dc0:	e8 ee       	ldi	r30, 0xE8	; 232
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8b 77       	andi	r24, 0x7B	; 123
     dc8:	80 83       	st	Z, r24
     dca:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     dcc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>
     dd0:	88 23       	and	r24, r24
     dd2:	41 f0       	breq	.+16     	; 0xde4 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dd4:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     dd6:	80 ff       	sbrs	r24, 0
     dd8:	f9 cf       	rjmp	.-14     	; 0xdcc <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dda:	e8 ee       	ldi	r30, 0xE8	; 232
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 77       	andi	r24, 0x7E	; 126
     de2:	80 83       	st	Z, r24
     de4:	08 95       	ret

00000de6 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     dee:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     df2:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
     df6:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     df8:	ac ee       	ldi	r26, 0xEC	; 236
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     dfc:	e8 ee       	ldi	r30, 0xE8	; 232
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e00:	0b ee       	ldi	r16, 0xEB	; 235
     e02:	10 e0       	ldi	r17, 0x00	; 0
     e04:	44 ee       	ldi	r20, 0xE4	; 228
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <Endpoint_WaitUntilReady+0x26>
     e0a:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e0c:	9c 91       	ld	r25, X
     e0e:	89 2f       	mov	r24, r25
     e10:	81 70       	andi	r24, 0x01	; 1
     e12:	90 fd       	sbrc	r25, 0
     e14:	1d c0       	rjmp	.+58     	; 0xe50 <Endpoint_WaitUntilReady+0x6a>
     e16:	20 c0       	rjmp	.+64     	; 0xe58 <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e18:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e1c:	88 23       	and	r24, r24
     e1e:	81 f0       	breq	.+32     	; 0xe40 <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e20:	85 30       	cpi	r24, 0x05	; 5
     e22:	81 f0       	breq	.+32     	; 0xe44 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e24:	e8 01       	movw	r28, r16
     e26:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     e28:	85 fd       	sbrc	r24, 5
     e2a:	0e c0       	rjmp	.+28     	; 0xe48 <Endpoint_WaitUntilReady+0x62>
     e2c:	ea 01       	movw	r28, r20
     e2e:	88 81       	ld	r24, Y
     e30:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e32:	28 17       	cp	r18, r24
     e34:	39 07       	cpc	r19, r25
     e36:	51 f3       	breq	.-44     	; 0xe0c <Endpoint_WaitUntilReady+0x26>
     e38:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     e3a:	39 f7       	brne	.-50     	; 0xe0a <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	0f c0       	rjmp	.+30     	; 0xe5e <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	0d c0       	rjmp	.+26     	; 0xe5e <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	0b c0       	rjmp	.+22     	; 0xe5e <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	09 c0       	rjmp	.+18     	; 0xe5e <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e50:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     e52:	80 ff       	sbrs	r24, 0
     e54:	e1 cf       	rjmp	.-62     	; 0xe18 <Endpoint_WaitUntilReady+0x32>
     e56:	fa cf       	rjmp	.-12     	; 0xe4c <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e58:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     e5a:	92 ff       	sbrs	r25, 2
     e5c:	dd cf       	rjmp	.-70     	; 0xe18 <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	08 95       	ret

00000e68 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     e68:	3c d0       	rcall	.+120    	; 0xee2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e6a:	3e d0       	rcall	.+124    	; 0xee8 <USB_INT_ClearAllInterrupts>
     e6c:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8f 77       	andi	r24, 0x7F	; 127
     e74:	80 83       	st	Z, r24
     e76:	80 81       	ld	r24, Z
				USBCON |=  (1 << USBE);
     e78:	80 68       	ori	r24, 0x80	; 128
     e7a:	80 83       	st	Z, r24
     e7c:	80 81       	ld	r24, Z
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     e7e:	8f 7d       	andi	r24, 0xDF	; 223
     e80:	80 83       	st	Z, r24
     e82:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e84:	89 bd       	out	0x29, r24	; 41
     e86:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e88:	89 bd       	out	0x29, r24	; 41
     e8a:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     e8c:	00 fe       	sbrs	r0, 0
     e8e:	fd cf       	rjmp	.-6      	; 0xe8a <USB_ResetInterface+0x22>
     e90:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     e94:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     e98:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     e9c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     ea0:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	c6 de       	rcall	.-628    	; 0xc34 <Endpoint_ConfigureEndpoint_Prv>
     ea8:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8e 7f       	andi	r24, 0xFE	; 254
     eb0:	80 83       	st	Z, r24
     eb2:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	80 83       	st	Z, r24
     ebc:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     ebe:	88 60       	ori	r24, 0x08	; 8
     ec0:	80 83       	st	Z, r24
     ec2:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	80 83       	st	Z, r24
     ecc:	08 95       	ret

00000ece <USB_Init>:
     ece:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	8e 7f       	andi	r24, 0xFE	; 254
     ed6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <USB_IsInitialized>

	USB_ResetInterface();
     ede:	c4 cf       	rjmp	.-120    	; 0xe68 <USB_ResetInterface>
     ee0:	08 95       	ret

00000ee2 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     ee2:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
     ee6:	08 95       	ret

00000ee8 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     ee8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
     eec:	08 95       	ret

00000eee <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	2f 93       	push	r18
     efa:	3f 93       	push	r19
     efc:	4f 93       	push	r20
     efe:	5f 93       	push	r21
     f00:	6f 93       	push	r22
     f02:	7f 93       	push	r23
     f04:	8f 93       	push	r24
     f06:	9f 93       	push	r25
     f08:	af 93       	push	r26
     f0a:	bf 93       	push	r27
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     f10:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     f14:	82 ff       	sbrs	r24, 2
     f16:	0a c0       	rjmp	.+20     	; 0xf2c <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     f18:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
     f1c:	82 ff       	sbrs	r24, 2
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     f20:	e1 ee       	ldi	r30, 0xE1	; 225
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8b 7f       	andi	r24, 0xFB	; 251
     f28:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     f2a:	bd d2       	rcall	.+1402   	; 0x14a6 <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     f2c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     f30:	80 ff       	sbrs	r24, 0
     f32:	15 c0       	rjmp	.+42     	; 0xf5e <__vector_11+0x70>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     f34:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
     f38:	80 ff       	sbrs	r24, 0
     f3a:	11 c0       	rjmp	.+34     	; 0xf5e <__vector_11+0x70>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f3c:	e2 ee       	ldi	r30, 0xE2	; 226
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8e 7f       	andi	r24, 0xFE	; 254
     f44:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f46:	80 81       	ld	r24, Z
     f48:	80 61       	ori	r24, 0x10	; 16
     f4a:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     f4c:	e8 ed       	ldi	r30, 0xD8	; 216
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	80 62       	ori	r24, 0x20	; 32
     f54:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f56:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     f58:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     f5c:	8d d2       	rcall	.+1306   	; 0x1478 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     f5e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f62:	84 ff       	sbrs	r24, 4
     f64:	2f c0       	rjmp	.+94     	; 0xfc4 <__vector_11+0xd6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     f66:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
     f6a:	84 ff       	sbrs	r24, 4
     f6c:	2b c0       	rjmp	.+86     	; 0xfc4 <__vector_11+0xd6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f72:	86 e0       	ldi	r24, 0x06	; 6
     f74:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f76:	09 b4       	in	r0, 0x29	; 41
     f78:	00 fe       	sbrs	r0, 0
     f7a:	fd cf       	rjmp	.-6      	; 0xf76 <__vector_11+0x88>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     f7c:	e8 ed       	ldi	r30, 0xD8	; 216
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8f 7d       	andi	r24, 0xDF	; 223
     f84:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     f86:	e1 ee       	ldi	r30, 0xE1	; 225
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8f 7e       	andi	r24, 0xEF	; 239
     f8e:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     f90:	e2 ee       	ldi	r30, 0xE2	; 226
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8f 7e       	andi	r24, 0xEF	; 239
     f98:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f9a:	80 81       	ld	r24, Z
     f9c:	81 60       	ori	r24, 0x01	; 1
     f9e:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     fa0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_Device_ConfigurationNumber>
     fa4:	88 23       	and	r24, r24
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <__vector_11+0xc2>
		  USB_DeviceState = DEVICE_STATE_Configured;
     fa8:	84 e0       	ldi	r24, 0x04	; 4
     faa:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <USB_DeviceState>
     fae:	09 c0       	rjmp	.+18     	; 0xfc2 <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     fb0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     fb4:	88 23       	and	r24, r24
     fb6:	14 f0       	brlt	.+4      	; 0xfbc <__vector_11+0xce>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <__vector_11+0xd0>
     fbc:	83 e0       	ldi	r24, 0x03	; 3
     fbe:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     fc2:	59 d2       	rcall	.+1202   	; 0x1476 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     fc4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     fc8:	83 ff       	sbrs	r24, 3
     fca:	23 c0       	rjmp	.+70     	; 0x1012 <__vector_11+0x124>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     fcc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
     fd0:	83 ff       	sbrs	r24, 3
     fd2:	1f c0       	rjmp	.+62     	; 0x1012 <__vector_11+0x124>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     fd4:	e1 ee       	ldi	r30, 0xE1	; 225
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	87 7f       	andi	r24, 0xF7	; 247
     fdc:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     fe4:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     fe8:	80 81       	ld	r24, Z
     fea:	8e 7f       	andi	r24, 0xFE	; 254
     fec:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     fee:	e2 ee       	ldi	r30, 0xE2	; 226
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ff8:	80 81       	ld	r24, Z
     ffa:	80 61       	ori	r24, 0x10	; 16
     ffc:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ffe:	42 e0       	ldi	r20, 0x02	; 2
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	17 de       	rcall	.-978    	; 0xc34 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1006:	e0 ef       	ldi	r30, 0xF0	; 240
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	88 60       	ori	r24, 0x08	; 8

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    100e:	80 83       	st	Z, r24
    1010:	da d1       	rcall	.+948    	; 0x13c6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1012:	ff 91       	pop	r31
    1014:	ef 91       	pop	r30
    1016:	bf 91       	pop	r27
    1018:	af 91       	pop	r26
    101a:	9f 91       	pop	r25
    101c:	8f 91       	pop	r24
    101e:	7f 91       	pop	r23
    1020:	6f 91       	pop	r22
    1022:	5f 91       	pop	r21
    1024:	4f 91       	pop	r20
    1026:	3f 91       	pop	r19
    1028:	2f 91       	pop	r18
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	0f 90       	pop	r0
    1030:	1f 90       	pop	r1
    1032:	18 95       	reti

00001034 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1034:	1f 92       	push	r1
    1036:	0f 92       	push	r0
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	0f 92       	push	r0
    103c:	11 24       	eor	r1, r1
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	ef 93       	push	r30
    1060:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1062:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1066:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1068:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    106c:	d8 2f       	mov	r29, r24
    106e:	d1 70       	andi	r29, 0x01	; 1
    1070:	80 fd       	sbrc	r24, 0
    1072:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1074:	0f 2e       	mov	r0, r31
    1076:	f9 ee       	ldi	r31, 0xE9	; 233
    1078:	ef 2e       	mov	r14, r31
    107a:	f1 2c       	mov	r15, r1
    107c:	f0 2d       	mov	r31, r0
    107e:	f7 01       	movw	r30, r14
    1080:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1082:	00 ef       	ldi	r16, 0xF0	; 240
    1084:	10 e0       	ldi	r17, 0x00	; 0
    1086:	f8 01       	movw	r30, r16
    1088:	80 81       	ld	r24, Z
    108a:	87 7f       	andi	r24, 0xF7	; 247
    108c:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void) ATTR_ALWAYS_INLINE;
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				sei();
    108e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1090:	21 d0       	rcall	.+66     	; 0x10d4 <USB_Device_ProcessControlRequest>
    1092:	f7 01       	movw	r30, r14
    1094:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1096:	f8 01       	movw	r30, r16
    1098:	80 81       	ld	r24, Z
    109a:	88 60       	ori	r24, 0x08	; 8
    109c:	80 83       	st	Z, r24
    109e:	cd 2b       	or	r28, r29
    10a0:	cf 70       	andi	r28, 0x0F	; 15
    10a2:	f7 01       	movw	r30, r14
    10a4:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	bf 91       	pop	r27
    10b0:	af 91       	pop	r26
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	7f 91       	pop	r23
    10b8:	6f 91       	pop	r22
    10ba:	5f 91       	pop	r21
    10bc:	4f 91       	pop	r20
    10be:	3f 91       	pop	r19
    10c0:	2f 91       	pop	r18
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	0f 90       	pop	r0
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	0f 90       	pop	r0
    10d0:	1f 90       	pop	r1
    10d2:	18 95       	reti

000010d4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	aa 97       	sbiw	r28, 0x2a	; 42
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	e1 e5       	ldi	r30, 0x51	; 81
    10ee:	f1 e0       	ldi	r31, 0x01	; 1
    10f0:	29 e5       	ldi	r18, 0x59	; 89
    10f2:	31 e0       	ldi	r19, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    10f4:	a1 ef       	ldi	r26, 0xF1	; 241
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    10fa:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    10fc:	2e 17       	cp	r18, r30
    10fe:	3f 07       	cpc	r19, r31
    1100:	d9 f7       	brne	.-10     	; 0x10f8 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1102:	c8 d1       	rcall	.+912    	; 0x1494 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1104:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	if (Endpoint_IsSETUPReceived())
    1108:	83 ff       	sbrs	r24, 3
    110a:	38 c1       	rjmp	.+624    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    110c:	e1 e5       	ldi	r30, 0x51	; 81
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    1112:	81 81       	ldd	r24, Z+1	; 0x01
    1114:	85 30       	cpi	r24, 0x05	; 5
    1116:	09 f4       	brne	.+2      	; 0x111a <USB_Device_ProcessControlRequest+0x46>
    1118:	7f c0       	rjmp	.+254    	; 0x1218 <USB_Device_ProcessControlRequest+0x144>
    111a:	30 f4       	brcc	.+12     	; 0x1128 <USB_Device_ProcessControlRequest+0x54>
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	c9 f1       	breq	.+114    	; 0x1192 <USB_Device_ProcessControlRequest+0xbe>
    1120:	68 f0       	brcs	.+26     	; 0x113c <USB_Device_ProcessControlRequest+0x68>
    1122:	83 30       	cpi	r24, 0x03	; 3
    1124:	b1 f1       	breq	.+108    	; 0x1192 <USB_Device_ProcessControlRequest+0xbe>
    1126:	2a c1       	rjmp	.+596    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
    1128:	88 30       	cpi	r24, 0x08	; 8
    112a:	09 f4       	brne	.+2      	; 0x112e <USB_Device_ProcessControlRequest+0x5a>
    112c:	f2 c0       	rjmp	.+484    	; 0x1312 <USB_Device_ProcessControlRequest+0x23e>
    112e:	89 30       	cpi	r24, 0x09	; 9
    1130:	09 f4       	brne	.+2      	; 0x1134 <USB_Device_ProcessControlRequest+0x60>
    1132:	ff c0       	rjmp	.+510    	; 0x1332 <USB_Device_ProcessControlRequest+0x25e>
    1134:	86 30       	cpi	r24, 0x06	; 6
    1136:	09 f0       	breq	.+2      	; 0x113a <USB_Device_ProcessControlRequest+0x66>
    1138:	21 c1       	rjmp	.+578    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
    113a:	91 c0       	rjmp	.+290    	; 0x125e <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    113c:	90 38       	cpi	r25, 0x80	; 128
    113e:	21 f0       	breq	.+8      	; 0x1148 <USB_Device_ProcessControlRequest+0x74>
    1140:	92 38       	cpi	r25, 0x82	; 130
    1142:	09 f0       	breq	.+2      	; 0x1146 <USB_Device_ProcessControlRequest+0x72>
    1144:	1b c1       	rjmp	.+566    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
    1146:	08 c0       	rjmp	.+16     	; 0x1158 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1148:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    114c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <USB_Device_RemoteWakeupEnabled>
    1150:	99 23       	and	r25, r25
    1152:	89 f0       	breq	.+34     	; 0x1176 <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1154:	82 60       	ori	r24, 0x02	; 2
    1156:	0f c0       	rjmp	.+30     	; 0x1176 <USB_Device_ProcessControlRequest+0xa2>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1158:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_ControlRequest+0x4>
    115c:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    115e:	85 30       	cpi	r24, 0x05	; 5
    1160:	08 f0       	brcs	.+2      	; 0x1164 <USB_Device_ProcessControlRequest+0x90>
    1162:	0c c1       	rjmp	.+536    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1164:	e9 ee       	ldi	r30, 0xE9	; 233
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    116a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    116e:	85 fb       	bst	r24, 5
    1170:	88 27       	eor	r24, r24
    1172:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1174:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1176:	e8 ee       	ldi	r30, 0xE8	; 232
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	90 81       	ld	r25, Z
    117c:	97 7f       	andi	r25, 0xF7	; 247
    117e:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1180:	a1 ef       	ldi	r26, 0xF1	; 241
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    1186:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1188:	80 81       	ld	r24, Z
    118a:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    118c:	80 83       	st	Z, r24
    118e:	07 de       	rcall	.-1010   	; 0xd9e <Endpoint_ClearStatusStage>
    1190:	f5 c0       	rjmp	.+490    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1192:	99 23       	and	r25, r25
    1194:	09 f4       	brne	.+2      	; 0x1198 <USB_Device_ProcessControlRequest+0xc4>
    1196:	01 c1       	rjmp	.+514    	; 0x139a <USB_Device_ProcessControlRequest+0x2c6>
    1198:	92 30       	cpi	r25, 0x02	; 2
    119a:	09 f0       	breq	.+2      	; 0x119e <USB_Device_ProcessControlRequest+0xca>
    119c:	ef c0       	rjmp	.+478    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
    119e:	02 c1       	rjmp	.+516    	; 0x13a4 <USB_Device_ProcessControlRequest+0x2d0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    11a0:	91 e0       	ldi	r25, 0x01	; 1
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <USB_Device_ProcessControlRequest+0xd4>
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <USB_Device_RemoteWakeupEnabled>
    11ac:	2c c0       	rjmp	.+88     	; 0x1206 <USB_Device_ProcessControlRequest+0x132>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    11ae:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_ControlRequest+0x4>
    11b2:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    11b4:	9f ef       	ldi	r25, 0xFF	; 255
    11b6:	98 0f       	add	r25, r24
    11b8:	94 30       	cpi	r25, 0x04	; 4
    11ba:	08 f0       	brcs	.+2      	; 0x11be <USB_Device_ProcessControlRequest+0xea>
    11bc:	df c0       	rjmp	.+446    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11be:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    11c2:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    11c6:	90 ff       	sbrs	r25, 0
    11c8:	1e c0       	rjmp	.+60     	; 0x1206 <USB_Device_ProcessControlRequest+0x132>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    11ca:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <USB_ControlRequest+0x1>
    11ce:	93 30       	cpi	r25, 0x03	; 3
    11d0:	31 f4       	brne	.+12     	; 0x11de <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    11d2:	eb ee       	ldi	r30, 0xEB	; 235
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 62       	ori	r24, 0x20	; 32
    11da:	80 83       	st	Z, r24
    11dc:	14 c0       	rjmp	.+40     	; 0x1206 <USB_Device_ProcessControlRequest+0x132>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    11de:	eb ee       	ldi	r30, 0xEB	; 235
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	90 81       	ld	r25, Z
    11e4:	90 61       	ori	r25, 0x10	; 16
    11e6:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    11e8:	21 e0       	ldi	r18, 0x01	; 1
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	a9 01       	movw	r20, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <USB_Device_ProcessControlRequest+0x120>
    11f0:	44 0f       	add	r20, r20
    11f2:	55 1f       	adc	r21, r21
    11f4:	8a 95       	dec	r24
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <USB_Device_ProcessControlRequest+0x11c>
    11f8:	aa ee       	ldi	r26, 0xEA	; 234
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	4c 93       	st	X, r20
				UERST = 0;
    11fe:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1200:	80 81       	ld	r24, Z
    1202:	88 60       	ori	r24, 0x08	; 8
    1204:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1206:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    120a:	e8 ee       	ldi	r30, 0xE8	; 232
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1212:	80 83       	st	Z, r24
    1214:	c4 dd       	rcall	.-1144   	; 0xd9e <Endpoint_ClearStatusStage>
    1216:	b2 c0       	rjmp	.+356    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1218:	91 11       	cpse	r25, r1
    121a:	b0 c0       	rjmp	.+352    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    121c:	10 91 53 01 	lds	r17, 0x0153	; 0x800153 <USB_ControlRequest+0x2>
    1220:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1222:	e3 ee       	ldi	r30, 0xE3	; 227
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 78       	andi	r24, 0x80	; 128
    122a:	81 2b       	or	r24, r17
    122c:	80 83       	st	Z, r24
    122e:	e8 ee       	ldi	r30, 0xE8	; 232
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1236:	80 83       	st	Z, r24
    1238:	b2 dd       	rcall	.-1180   	; 0xd9e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    123a:	e8 ee       	ldi	r30, 0xE8	; 232
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    1240:	80 ff       	sbrs	r24, 0
    1242:	fd cf       	rjmp	.-6      	; 0x123e <USB_Device_ProcessControlRequest+0x16a>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1244:	e3 ee       	ldi	r30, 0xE3	; 227
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 68       	ori	r24, 0x80	; 128
    124c:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    124e:	11 11       	cpse	r17, r1
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <USB_Device_ProcessControlRequest+0x182>
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <USB_Device_ProcessControlRequest+0x184>
    1256:	83 e0       	ldi	r24, 0x03	; 3
    1258:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <USB_DeviceState>
    125c:	8f c0       	rjmp	.+286    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    125e:	90 58       	subi	r25, 0x80	; 128
    1260:	92 30       	cpi	r25, 0x02	; 2
    1262:	08 f0       	brcs	.+2      	; 0x1266 <USB_Device_ProcessControlRequest+0x192>
    1264:	8b c0       	rjmp	.+278    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1266:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USB_ControlRequest+0x2>
    126a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <USB_ControlRequest+0x3>
    126e:	8c 3d       	cpi	r24, 0xDC	; 220
    1270:	53 e0       	ldi	r21, 0x03	; 3
    1272:	95 07       	cpc	r25, r21
    1274:	99 f5       	brne	.+102    	; 0x12dc <USB_Device_ProcessControlRequest+0x208>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1276:	83 e0       	ldi	r24, 0x03	; 3
    1278:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    127a:	8a e2       	ldi	r24, 0x2A	; 42
    127c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				return SREG;
    127e:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void) ATTR_ALWAYS_INLINE;
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				cli();
    1280:	f8 94       	cli

				GCC_MEMORY_BARRIER();
    1282:	de 01       	movw	r26, r28
    1284:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1286:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1288:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    128a:	41 e2       	ldi	r20, 0x21	; 33
    128c:	e3 2f       	mov	r30, r19
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    1294:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    1296:	20 ff       	sbrs	r18, 0
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
    129a:	82 95       	swap	r24
    129c:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    129e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    12a0:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    12a2:	8a 30       	cpi	r24, 0x0A	; 10
    12a4:	18 f0       	brcs	.+6      	; 0x12ac <USB_Device_ProcessControlRequest+0x1d8>
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	c7 96       	adiw	r24, 0x37	; 55
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <USB_Device_ProcessControlRequest+0x1dc>
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	c0 96       	adiw	r24, 0x30	; 48
    12b0:	8d 93       	st	X+, r24
    12b2:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    12b4:	2f 5f       	subi	r18, 0xFF	; 255
    12b6:	24 31       	cpi	r18, 0x14	; 20
    12b8:	49 f7       	brne	.-46     	; 0x128c <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState) ATTR_ALWAYS_INLINE;
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				SREG = GlobalIntState;
    12ba:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12bc:	08 ee       	ldi	r16, 0xE8	; 232
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	f8 01       	movw	r30, r16
    12c2:	80 81       	ld	r24, Z
    12c4:	87 7f       	andi	r24, 0xF7	; 247
    12c6:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    12c8:	6a e2       	ldi	r22, 0x2A	; 42
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	ce 01       	movw	r24, r28
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	56 db       	rcall	.-2388   	; 0x97e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12d2:	f8 01       	movw	r30, r16
    12d4:	80 81       	ld	r24, Z
    12d6:	8b 77       	andi	r24, 0x7B	; 123
    12d8:	80 83       	st	Z, r24
    12da:	50 c0       	rjmp	.+160    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    12dc:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <USB_ControlRequest+0x4>
    12e0:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <USB_ControlRequest+0x5>
    12e4:	ae 01       	movw	r20, r28
    12e6:	4f 5f       	subi	r20, 0xFF	; 255
    12e8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ea:	0e 94 b4 00 	call	0x168	; 0x168 <CALLBACK_USB_GetDescriptor>
    12ee:	bc 01       	movw	r22, r24
    12f0:	89 2b       	or	r24, r25
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <USB_Device_ProcessControlRequest+0x222>
    12f4:	43 c0       	rjmp	.+134    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12f6:	08 ee       	ldi	r16, 0xE8	; 232
    12f8:	10 e0       	ldi	r17, 0x00	; 0
    12fa:	f8 01       	movw	r30, r16
    12fc:	90 81       	ld	r25, Z
    12fe:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1300:	90 83       	st	Z, r25
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	1a dc       	rcall	.-1996   	; 0xb3c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1308:	f8 01       	movw	r30, r16
    130a:	80 81       	ld	r24, Z
    130c:	8b 77       	andi	r24, 0x7B	; 123
    130e:	80 83       	st	Z, r24
    1310:	35 c0       	rjmp	.+106    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1312:	90 38       	cpi	r25, 0x80	; 128
    1314:	99 f5       	brne	.+102    	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1316:	e8 ee       	ldi	r30, 0xE8	; 232
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	87 7f       	andi	r24, 0xF7	; 247
    131e:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1320:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1324:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1328:	80 81       	ld	r24, Z
    132a:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    132c:	80 83       	st	Z, r24
    132e:	37 dd       	rcall	.-1426   	; 0xd9e <Endpoint_ClearStatusStage>
    1330:	25 c0       	rjmp	.+74     	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1332:	91 11       	cpse	r25, r1
    1334:	23 c0       	rjmp	.+70     	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1336:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USB_ControlRequest+0x2>
    133a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <USB_ControlRequest+0x3>
    133e:	99 27       	eor	r25, r25
    1340:	02 97       	sbiw	r24, 0x02	; 2
    1342:	e4 f4       	brge	.+56     	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1344:	e8 ee       	ldi	r30, 0xE8	; 232
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    134c:	80 83       	st	Z, r24
    134e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USB_ControlRequest+0x2>
    1352:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    1356:	23 dd       	rcall	.-1466   	; 0xd9e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1358:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_Device_ConfigurationNumber>
    135c:	88 23       	and	r24, r24
    135e:	21 f0       	breq	.+8      	; 0x1368 <USB_Device_ProcessControlRequest+0x294>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1360:	84 e0       	ldi	r24, 0x04	; 4
    1362:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <USB_DeviceState>
    1366:	09 c0       	rjmp	.+18     	; 0x137a <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1368:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    136c:	88 23       	and	r24, r24
    136e:	14 f0       	brlt	.+4      	; 0x1374 <USB_Device_ProcessControlRequest+0x2a0>
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <USB_Device_ProcessControlRequest+0x2a2>
    1374:	84 e0       	ldi	r24, 0x04	; 4
    1376:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    137a:	7f d0       	rcall	.+254    	; 0x147a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    137c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1380:	83 ff       	sbrs	r24, 3
    1382:	16 c0       	rjmp	.+44     	; 0x13b0 <USB_Device_ProcessControlRequest+0x2dc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1384:	e8 ee       	ldi	r30, 0xE8	; 232
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	87 7f       	andi	r24, 0xF7	; 247
    138c:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    138e:	eb ee       	ldi	r30, 0xEB	; 235
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	80 62       	ori	r24, 0x20	; 32
    1396:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1398:	0b c0       	rjmp	.+22     	; 0x13b0 <USB_Device_ProcessControlRequest+0x2dc>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    139a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <USB_ControlRequest+0x2>
    139e:	91 30       	cpi	r25, 0x01	; 1
    13a0:	69 f7       	brne	.-38     	; 0x137c <USB_Device_ProcessControlRequest+0x2a8>
    13a2:	fe ce       	rjmp	.-516    	; 0x11a0 <USB_Device_ProcessControlRequest+0xcc>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    13a4:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USB_ControlRequest+0x2>
    13a8:	88 23       	and	r24, r24
    13aa:	09 f4       	brne	.+2      	; 0x13ae <USB_Device_ProcessControlRequest+0x2da>
    13ac:	00 cf       	rjmp	.-512    	; 0x11ae <USB_Device_ProcessControlRequest+0xda>
    13ae:	2b cf       	rjmp	.-426    	; 0x1206 <USB_Device_ProcessControlRequest+0x132>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    13b0:	aa 96       	adiw	r28, 0x2a	; 42
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	08 95       	ret

000013c6 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    13c6:	08 95       	ret

000013c8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    13c8:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    13ca:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_DeviceState>
    13ce:	88 23       	and	r24, r24
    13d0:	99 f0       	breq	.+38     	; 0x13f8 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13d2:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    13d6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    13d8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    13dc:	98 2f       	mov	r25, r24
    13de:	91 70       	andi	r25, 0x01	; 1
    13e0:	80 fd       	sbrc	r24, 0
    13e2:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13e4:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13e6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    13ee:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    13f0:	71 de       	rcall	.-798    	; 0x10d4 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13f2:	cf 70       	andi	r28, 0x0F	; 15
    13f4:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    13f8:	cf 91       	pop	r28
    13fa:	08 95       	ret

000013fc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    13fc:	84 b7       	in	r24, 0x34	; 52
    13fe:	87 7f       	andi	r24, 0xF7	; 247
    1400:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	a8 95       	wdr
    1408:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    140c:	88 61       	ori	r24, 0x18	; 24
    140e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1412:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    1416:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	80 e8       	ldi	r24, 0x80	; 128
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1424:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1428:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	USB_Init();
    142a:	51 cd       	rjmp	.-1374   	; 0xece <USB_Init>
    142c:	08 95       	ret

0000142e <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
    142e:	e6 df       	rcall	.-52     	; 0x13fc <SetupHardware>
			static inline void GlobalInterruptEnable(void) ATTR_ALWAYS_INLINE;
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				sei();
    1430:	78 94       	sei
	GlobalInterruptEnable();

	DDRB |= _BV(PB0) | _BV(PB1) | _BV(PB2) | CS_ADC;
    1432:	84 b1       	in	r24, 0x04	; 4
    1434:	87 61       	ori	r24, 0x17	; 23
    1436:	84 b9       	out	0x04, r24	; 4
	PORTB |= _BV(PB4);
    1438:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= ~(_BV(PB1) | _BV(PB2));
    143a:	85 b1       	in	r24, 0x05	; 5
    143c:	89 7f       	andi	r24, 0xF9	; 249
    143e:	85 b9       	out	0x05, r24	; 5
	PORTB |= _BV(PB0);
    1440:	28 9a       	sbi	0x05, 0	; 5
	//_delay_us(10);
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << SPR0));
    1442:	81 e5       	ldi	r24, 0x51	; 81
    1444:	8c bd       	out	0x2c, r24	; 44

	DDRD |= S0 | S1 | S2 | OEA | OEB | OEC | OUT_OE | OUT;
    1446:	8a b1       	in	r24, 0x0a	; 10
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= OEA | OEB | OEC | OUT_OE;
    144c:	8b b1       	in	r24, 0x0b	; 11
    144e:	88 67       	ori	r24, 0x78	; 120
    1450:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(S0 | S1 | S2 | OUT);
    1452:	8b b1       	in	r24, 0x0b	; 11
    1454:	88 77       	andi	r24, 0x78	; 120
    1456:	8b b9       	out	0x0b, r24	; 11

	DDRC |= PEAK_DRAIN;
    1458:	3a 9a       	sbi	0x07, 2	; 7
	PORTC &= ~PEAK_DRAIN;
    145a:	42 98       	cbi	0x08, 2	; 8

	for (;;)
	{
		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    145c:	80 e1       	ldi	r24, 0x10	; 16
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	0e 94 69 01 	call	0x2d2	; 0x2d2 <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    1464:	80 e1       	ldi	r24, 0x10	; 16
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	0e 94 51 01 	call	0x2a2	; 0x2a2 <CDC_Device_USBTask>
		HID_Device_USBTask(&Mouse_HID_Interface);
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
    1470:	6a d9       	rcall	.-3372   	; 0x746 <HID_Device_USBTask>
    1472:	aa df       	rcall	.-172    	; 0x13c8 <USB_USBTask>
    1474:	f3 cf       	rjmp	.-26     	; 0x145c <main+0x2e>

00001476 <EVENT_USB_Device_Connect>:
	USB_Init();
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    1476:	08 95       	ret

00001478 <EVENT_USB_Device_Disconnect>:

}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    1478:	08 95       	ret

0000147a <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	4f d9       	rcall	.-3426   	; 0x71e <HID_Device_ConfigureEndpoints>
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    1480:	80 e1       	ldi	r24, 0x10	; 16
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	0e 94 03 01 	call	0x206	; 0x206 <CDC_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1488:	e2 ee       	ldi	r30, 0xE2	; 226
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	84 60       	ori	r24, 0x04	; 4
    1490:	80 83       	st	Z, r24
    1492:	08 95       	ret

00001494 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    1494:	80 e1       	ldi	r24, 0x10	; 16
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	0e 94 a1 01 	call	0x342	; 0x342 <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0c 94 42 02 	jmp	0x484	; 0x484 <HID_Device_ProcessControlRequest>
    14a4:	08 95       	ret

000014a6 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    14a6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Mouse_HID_Interface+0xe>
    14aa:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Mouse_HID_Interface+0xf>
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	29 f0       	breq	.+10     	; 0x14bc <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Mouse_HID_Interface+0xf>
    14b8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Mouse_HID_Interface+0xe>
    14bc:	08 95       	ret

000014be <read>:
{
	HID_Device_MillisecondElapsed(&Mouse_HID_Interface);
}

uint16_t read(uint8_t coil) {
	PORTD = coil;// | OUT_OE;
    14be:	8b b9       	out	0x0b, r24	; 11
    14c0:	80 e1       	ldi	r24, 0x10	; 16
	//PORTD &= ~OUT_OE;

	for (uint8_t i = 0; i < 16; i++) {
		PORTD |= OUT;// 2 cycles
    14c2:	5f 9a       	sbi	0x0b, 7	; 11
	...
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
    14d8:	00 00       	nop
		PORTD &= ~OUT;
    14da:	5f 98       	cbi	0x0b, 7	; 11
	...
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
    14f0:	00 00       	nop
		PORTD |= OUT;// 2 cycles
    14f2:	5f 9a       	sbi	0x0b, 7	; 11
	...
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
    1508:	00 00       	nop
		PORTD &= ~OUT;
    150a:	5f 98       	cbi	0x0b, 7	; 11
	...
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		PORTD |= OUT;// 2 cycles
    1524:	5f 9a       	sbi	0x0b, 7	; 11
	...
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
    153a:	00 00       	nop
		PORTD &= ~OUT;// 2 cycles
    153c:	5f 98       	cbi	0x0b, 7	; 11
	...
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
		asm volatile("nop");
    154e:	81 50       	subi	r24, 0x01	; 1

uint16_t read(uint8_t coil) {
	PORTD = coil;// | OUT_OE;
	//PORTD &= ~OUT_OE;

	for (uint8_t i = 0; i < 16; i++) {
    1550:	09 f0       	breq	.+2      	; 0x1554 <read+0x96>
    1552:	b7 cf       	rjmp	.-146    	; 0x14c2 <read+0x4>
		asm volatile("nop");
		asm volatile("nop");
		// end of loop compiles to subi (1 cycle), breq (1 cycle if staying in loop), rjmp (2 cycles)
	}
	
	PORTD |= OUT_OE;
    1554:	5e 9a       	sbi	0x0b, 6	; 11

	PORTC |= PEAK_DRAIN;
    1556:	42 9a       	sbi	0x08, 2	; 8
	asm volatile("nop"); // 7 cycles
    1558:	00 00       	nop
	asm volatile("nop");
    155a:	00 00       	nop
	asm volatile("nop");
	asm volatile("nop");
	asm volatile("nop");
	asm volatile("nop");
	asm volatile("nop");*/
	PORTC &= ~PEAK_DRAIN;
    155c:	42 98       	cbi	0x08, 2	; 8
    155e:	80 e1       	ldi	r24, 0x10	; 16

	for (uint8_t i = 0; i < 16; i++) {
		asm volatile ("nop");
    1560:	00 00       	nop
    1562:	81 50       	subi	r24, 0x01	; 1
	asm volatile("nop");
	asm volatile("nop");
	asm volatile("nop");*/
	PORTC &= ~PEAK_DRAIN;

	for (uint8_t i = 0; i < 16; i++) {
    1564:	e9 f7       	brne	.-6      	; 0x1560 <read+0xa2>
		asm volatile ("nop");
	}

	PORTB &= ~CS_ADC;
    1566:	2c 98       	cbi	0x05, 4	; 5

	PORTD &= ~OUT_OE;
    1568:	5e 98       	cbi	0x0b, 6	; 11
	
	SPDR = 0;
    156a:	1e bc       	out	0x2e, r1	; 46
	asm volatile("nop"); // bring loop in phase with spi interrupt, this actually makes the read a few cycles faster
    156c:	00 00       	nop
	while (!(SPSR & (1 << SPIF)));
    156e:	0d b4       	in	r0, 0x2d	; 45
    1570:	07 fe       	sbrs	r0, 7
    1572:	fd cf       	rjmp	.-6      	; 0x156e <read+0xb0>
	
	uint16_t value = SPDR << 8;
    1574:	8e b5       	in	r24, 0x2e	; 46
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	98 2f       	mov	r25, r24
    157a:	88 27       	eor	r24, r24
	
	SPDR = 0;
    157c:	1e bc       	out	0x2e, r1	; 46
	asm volatile("nop");
    157e:	00 00       	nop
	while (!(SPSR & (1 << SPIF)));
    1580:	0d b4       	in	r0, 0x2d	; 45
    1582:	07 fe       	sbrs	r0, 7
    1584:	fd cf       	rjmp	.-6      	; 0x1580 <read+0xc2>
	
	value |= SPDR;
    1586:	2e b5       	in	r18, 0x2e	; 46
	value = (value >> 1) & 0xFFF;
    1588:	82 2b       	or	r24, r18
    158a:	96 95       	lsr	r25
    158c:	87 95       	ror	r24
	
	PORTB |= CS_ADC;
    158e:	2c 9a       	sbi	0x05, 4	; 5
		asm volatile ("nop");
	}
	PORTC &= ~PEAK_DRAIN;*/

	return value;
}
    1590:	9f 70       	andi	r25, 0x0F	; 15
    1592:	08 95       	ret

00001594 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
    1594:	2f 92       	push	r2
    1596:	3f 92       	push	r3
    1598:	4f 92       	push	r4
    159a:	5f 92       	push	r5
    159c:	6f 92       	push	r6
    159e:	7f 92       	push	r7
    15a0:	8f 92       	push	r8
    15a2:	9f 92       	push	r9
    15a4:	af 92       	push	r10
    15a6:	bf 92       	push	r11
    15a8:	cf 92       	push	r12
    15aa:	df 92       	push	r13
    15ac:	ef 92       	push	r14
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	27 97       	sbiw	r28, 0x07	; 7
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	3a 83       	std	Y+2, r19	; 0x02
    15ca:	29 83       	std	Y+1, r18	; 0x01
    15cc:	1e 83       	std	Y+6, r17	; 0x06
    15ce:	0d 83       	std	Y+5, r16	; 0x05
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;

	MouseReport->X = lastX;
    15d0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <lastX>
    15d4:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <lastX+0x1>
    15d8:	f9 01       	movw	r30, r18
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24
	MouseReport->Y = lastY;
    15de:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <lastY>
    15e2:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <lastY+0x1>
    15e6:	93 83       	std	Z+3, r25	; 0x03
    15e8:	82 83       	std	Z+2, r24	; 0x02

	cli();
    15ea:	f8 94       	cli
	int32_t wx = 0;
	int32_t cx = 0;

	//int32_t cr[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	for (uint8_t rx = 0; rx < 14; rx++) {
    15ec:	1f 82       	std	Y+7, r1	; 0x07
	MouseReport->Y = lastY;

	cli();

	int32_t wx = 0;
	int32_t cx = 0;
    15ee:	c1 2c       	mov	r12, r1
    15f0:	d1 2c       	mov	r13, r1
    15f2:	76 01       	movw	r14, r12
	MouseReport->X = lastX;
	MouseReport->Y = lastY;

	cli();

	int32_t wx = 0;
    15f4:	21 2c       	mov	r2, r1
    15f6:	31 2c       	mov	r3, r1
    15f8:	21 01       	movw	r4, r2
	int32_t cx = 0;

	//int32_t cr[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	for (uint8_t rx = 0; rx < 14; rx++) {
    15fa:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t x = rx;
		if ((x & 1) == 1) x = 14 - x;
		int32_t value = (int32_t) read(columns[13 - x]);
    15fc:	0d e0       	ldi	r16, 0x0D	; 13
    15fe:	10 e0       	ldi	r17, 0x00	; 0
    1600:	61 2c       	mov	r6, r1

	//int32_t cr[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	for (uint8_t rx = 0; rx < 14; rx++) {
		uint8_t x = rx;
		if ((x & 1) == 1) x = 14 - x;
    1602:	0f 2e       	mov	r0, r31
    1604:	fe e0       	ldi	r31, 0x0E	; 14
    1606:	7f 2e       	mov	r7, r31
    1608:	f0 2d       	mov	r31, r0
    160a:	09 c0       	rjmp	.+18     	; 0x161e <CALLBACK_HID_Device_CreateHIDReport+0x8a>
    160c:	9f 81       	ldd	r25, Y+7	; 0x07
    160e:	90 ff       	sbrs	r25, 0
    1610:	04 c0       	rjmp	.+8      	; 0x161a <CALLBACK_HID_Device_CreateHIDReport+0x86>
    1612:	e7 2d       	mov	r30, r7
    1614:	e9 1b       	sub	r30, r25
    1616:	eb 83       	std	Y+3, r30	; 0x03
    1618:	02 c0       	rjmp	.+4      	; 0x161e <CALLBACK_HID_Device_CreateHIDReport+0x8a>
	int32_t wx = 0;
	int32_t cx = 0;

	//int32_t cr[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	for (uint8_t rx = 0; rx < 14; rx++) {
    161a:	ff 81       	ldd	r31, Y+7	; 0x07
    161c:	fb 83       	std	Y+3, r31	; 0x03
		uint8_t x = rx;
		if ((x & 1) == 1) x = 14 - x;
		int32_t value = (int32_t) read(columns[13 - x]);
    161e:	f8 01       	movw	r30, r16
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	e8 1b       	sub	r30, r24
    1624:	f1 09       	sbc	r31, r1
    1626:	eb 5c       	subi	r30, 0xCB	; 203
    1628:	fe 4f       	sbci	r31, 0xFE	; 254
    162a:	80 81       	ld	r24, Z
    162c:	48 df       	rcall	.-368    	; 0x14be <read>
    162e:	a0 e0       	ldi	r26, 0x00	; 0
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	9c 01       	movw	r18, r24
    1634:	ad 01       	movw	r20, r26
    1636:	2a 53       	subi	r18, 0x3A	; 58
    1638:	31 09       	sbc	r19, r1
    163a:	41 09       	sbc	r20, r1
    163c:	51 09       	sbc	r21, r1
    163e:	22 f4       	brpl	.+8      	; 0x1648 <CALLBACK_HID_Device_CreateHIDReport+0xb4>
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	50 e0       	ldi	r21, 0x00	; 0
		value -= OFFSET;
		if (value < 0) value = 0;
		if (value > 1100) value = 0;
    1648:	2d 34       	cpi	r18, 0x4D	; 77
    164a:	94 e0       	ldi	r25, 0x04	; 4
    164c:	39 07       	cpc	r19, r25
    164e:	41 05       	cpc	r20, r1
    1650:	51 05       	cpc	r21, r1
    1652:	24 f0       	brlt	.+8      	; 0x165c <CALLBACK_HID_Device_CreateHIDReport+0xc8>
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e0       	ldi	r20, 0x00	; 0
    165a:	50 e0       	ldi	r21, 0x00	; 0
		int32_t v = ((value * value) /*<< 1*/) + (value * /*6193*/3096);// + 4752;
    165c:	ca 01       	movw	r24, r20
    165e:	b9 01       	movw	r22, r18
    1660:	68 5e       	subi	r22, 0xE8	; 232
    1662:	73 4f       	sbci	r23, 0xF3	; 243
    1664:	8f 4f       	sbci	r24, 0xFF	; 255
    1666:	9f 4f       	sbci	r25, 0xFF	; 255
    1668:	78 d3       	rcall	.+1776   	; 0x1d5a <__mulsi3>
    166a:	86 2e       	mov	r8, r22
    166c:	97 2e       	mov	r9, r23
    166e:	a8 2e       	mov	r10, r24
    1670:	b9 2e       	mov	r11, r25
    1672:	bb 20       	and	r11, r11
    1674:	24 f4       	brge	.+8      	; 0x167e <CALLBACK_HID_Device_CreateHIDReport+0xea>
    1676:	81 2c       	mov	r8, r1
    1678:	91 2c       	mov	r9, r1
    167a:	a1 2c       	mov	r10, r1
    167c:	b1 2c       	mov	r11, r1
    167e:	a5 01       	movw	r20, r10
    1680:	94 01       	movw	r18, r8
    1682:	e9 e5       	ldi	r30, 0x59	; 89
    1684:	8e 16       	cp	r8, r30
    1686:	e7 e3       	ldi	r30, 0x37	; 55
    1688:	9e 06       	cpc	r9, r30
    168a:	ef e3       	ldi	r30, 0x3F	; 63
    168c:	ae 06       	cpc	r10, r30
    168e:	b1 04       	cpc	r11, r1
    1690:	24 f0       	brlt	.+8      	; 0x169a <CALLBACK_HID_Device_CreateHIDReport+0x106>
    1692:	28 e5       	ldi	r18, 0x58	; 88
    1694:	37 e3       	ldi	r19, 0x37	; 55
    1696:	4f e3       	ldi	r20, 0x3F	; 63
    1698:	56 2d       	mov	r21, r6
		if (v < 0) v = 0;
		//if (v > 8285873) v = 8285873;
		if (v > 4142936) v = 4142936;
		wx += v;
    169a:	22 0e       	add	r2, r18
    169c:	33 1e       	adc	r3, r19
    169e:	44 1e       	adc	r4, r20
    16a0:	55 1e       	adc	r5, r21
		cx += v * x;
    16a2:	fb 81       	ldd	r31, Y+3	; 0x03
    16a4:	6f 2f       	mov	r22, r31
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	56 d3       	rcall	.+1708   	; 0x1d5a <__mulsi3>
    16ae:	c6 0e       	add	r12, r22
    16b0:	d7 1e       	adc	r13, r23
    16b2:	e8 1e       	adc	r14, r24
    16b4:	f9 1e       	adc	r15, r25
	int32_t wx = 0;
	int32_t cx = 0;

	//int32_t cr[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	for (uint8_t rx = 0; rx < 14; rx++) {
    16b6:	8f 81       	ldd	r24, Y+7	; 0x07
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	8f 83       	std	Y+7, r24	; 0x07
    16bc:	8e 30       	cpi	r24, 0x0E	; 14
    16be:	09 f0       	breq	.+2      	; 0x16c2 <CALLBACK_HID_Device_CreateHIDReport+0x12e>
	char strc[12];
	ltoa(wx, strc, 10);
	CDC_Device_SendString(&VirtualSerial_CDC_Interface, strc);
	CDC_Device_SendString(&VirtualSerial_CDC_Interface, "\n");*/

	float tpx = (2730.58333333f/*2520.5f*//*38461538f*/) * ((((float) cx) / ((float) wx)) - 0.5f);
    16c0:	a5 cf       	rjmp	.-182    	; 0x160c <CALLBACK_HID_Device_CreateHIDReport+0x78>
    16c2:	c7 01       	movw	r24, r14
    16c4:	b6 01       	movw	r22, r12
    16c6:	2a d2       	rcall	.+1108   	; 0x1b1c <__floatsisf>
    16c8:	6b 01       	movw	r12, r22
    16ca:	7c 01       	movw	r14, r24
    16cc:	c2 01       	movw	r24, r4
    16ce:	b1 01       	movw	r22, r2
    16d0:	25 d2       	rcall	.+1098   	; 0x1b1c <__floatsisf>
    16d2:	9b 01       	movw	r18, r22
    16d4:	ac 01       	movw	r20, r24
    16d6:	c7 01       	movw	r24, r14
    16d8:	b6 01       	movw	r22, r12
    16da:	85 d1       	rcall	.+778    	; 0x19e6 <__divsf3>
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	17 d1       	rcall	.+558    	; 0x1914 <__subsf3>
    16e6:	25 e5       	ldi	r18, 0x55	; 85
    16e8:	39 ea       	ldi	r19, 0xA9	; 169
    16ea:	4a e2       	ldi	r20, 0x2A	; 42
    16ec:	55 e4       	ldi	r21, 0x45	; 69
    16ee:	ca d2       	rcall	.+1428   	; 0x1c84 <__mulsf3>
    16f0:	6b 01       	movw	r12, r22
	if (tpx < 0) tpx = 0;
    16f2:	7c 01       	movw	r14, r24
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	a9 01       	movw	r20, r18
    16fa:	71 d1       	rcall	.+738    	; 0x19de <__cmpsf2>
    16fc:	88 23       	and	r24, r24
	if (tpx > 32767) tpx = 32767;
    16fe:	9c f0       	brlt	.+38     	; 0x1726 <CALLBACK_HID_Device_CreateHIDReport+0x192>
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	3e ef       	ldi	r19, 0xFE	; 254
    1704:	4f ef       	ldi	r20, 0xFF	; 255
    1706:	56 e4       	ldi	r21, 0x46	; 70
    1708:	c7 01       	movw	r24, r14
    170a:	b6 01       	movw	r22, r12
    170c:	b7 d2       	rcall	.+1390   	; 0x1c7c <__gesf2>
    170e:	18 16       	cp	r1, r24
    1710:	6c f4       	brge	.+26     	; 0x172c <CALLBACK_HID_Device_CreateHIDReport+0x198>
    1712:	0f 2e       	mov	r0, r31
    1714:	c1 2c       	mov	r12, r1
    1716:	fe ef       	ldi	r31, 0xFE	; 254
    1718:	df 2e       	mov	r13, r31
    171a:	ee 24       	eor	r14, r14
    171c:	ea 94       	dec	r14
    171e:	f6 e4       	ldi	r31, 0x46	; 70
    1720:	ff 2e       	mov	r15, r31
    1722:	f0 2d       	mov	r31, r0
	ltoa(wx, strc, 10);
	CDC_Device_SendString(&VirtualSerial_CDC_Interface, strc);
	CDC_Device_SendString(&VirtualSerial_CDC_Interface, "\n");*/

	float tpx = (2730.58333333f/*2520.5f*//*38461538f*/) * ((((float) cx) / ((float) wx)) - 0.5f);
	if (tpx < 0) tpx = 0;
    1724:	03 c0       	rjmp	.+6      	; 0x172c <CALLBACK_HID_Device_CreateHIDReport+0x198>
    1726:	c1 2c       	mov	r12, r1
    1728:	d1 2c       	mov	r13, r1
	if (tpx > 32767) tpx = 32767;
	int16_t penx = (int16_t) tpx;//((2730.58333333f/*2520.5f*//*38461538f*/) * (((float) cx) / ((float) wx)));
    172a:	76 01       	movw	r14, r12
    172c:	c7 01       	movw	r24, r14
    172e:	b6 01       	movw	r22, r12
    1730:	c2 d1       	rcall	.+900    	; 0x1ab6 <__fixsfsi>
    1732:	7c 83       	std	Y+4, r23	; 0x04
    1734:	6b 83       	std	Y+3, r22	; 0x03
    1736:	fb 01       	movw	r30, r22
    1738:	ff 23       	and	r31, r31
    173a:	14 f4       	brge	.+4      	; 0x1740 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>
    173c:	1c 82       	std	Y+4, r1	; 0x04
    173e:	1b 82       	std	Y+3, r1	; 0x03
	//CDC_Device_SendString(&VirtualSerial_CDC_Interface, "\n");

	int32_t wy = 0;
	int32_t cy = 0;

	for (uint8_t ry = 0; ry < 10; ry++) {
    1740:	1f 82       	std	Y+7, r1	; 0x07
	if (penx < 0) penx = 0;

	//CDC_Device_SendString(&VirtualSerial_CDC_Interface, "\n");

	int32_t wy = 0;
	int32_t cy = 0;
    1742:	c1 2c       	mov	r12, r1
    1744:	d1 2c       	mov	r13, r1
    1746:	76 01       	movw	r14, r12
	//if (penx < 0 || penx == 32767) CDC_Device_SendString(&VirtualSerial_CDC_Interface, " !!!!@@@@!!!!@@@@,");
	if (penx < 0) penx = 0;

	//CDC_Device_SendString(&VirtualSerial_CDC_Interface, "\n");

	int32_t wy = 0;
    1748:	81 2c       	mov	r8, r1
    174a:	91 2c       	mov	r9, r1
    174c:	54 01       	movw	r10, r8
	int32_t cy = 0;

	for (uint8_t ry = 0; ry < 10; ry++) {
    174e:	61 2c       	mov	r6, r1
		uint8_t y = ry;
		if ((y & 1) == 1) y = 10 - y;
    1750:	0f 2e       	mov	r0, r31
    1752:	fa e0       	ldi	r31, 0x0A	; 10
    1754:	7f 2e       	mov	r7, r31
    1756:	f0 2d       	mov	r31, r0
    1758:	07 c0       	rjmp	.+14     	; 0x1768 <CALLBACK_HID_Device_CreateHIDReport+0x1d4>
    175a:	8f 81       	ldd	r24, Y+7	; 0x07
    175c:	80 ff       	sbrs	r24, 0
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <CALLBACK_HID_Device_CreateHIDReport+0x1d2>
    1760:	67 2c       	mov	r6, r7
    1762:	68 1a       	sub	r6, r24
	//CDC_Device_SendString(&VirtualSerial_CDC_Interface, "\n");

	int32_t wy = 0;
	int32_t cy = 0;

	for (uint8_t ry = 0; ry < 10; ry++) {
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <CALLBACK_HID_Device_CreateHIDReport+0x1d4>
		uint8_t y = ry;
		if ((y & 1) == 1) y = 10 - y;
		int32_t value = (int32_t) read(rows[9 - y]);
    1766:	6f 80       	ldd	r6, Y+7	; 0x07
    1768:	e9 e0       	ldi	r30, 0x09	; 9
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	e6 19       	sub	r30, r6
    176e:	f1 09       	sbc	r31, r1
    1770:	e5 5d       	subi	r30, 0xD5	; 213
    1772:	fe 4f       	sbci	r31, 0xFE	; 254
    1774:	80 81       	ld	r24, Z
    1776:	a3 de       	rcall	.-698    	; 0x14be <read>
    1778:	a0 e0       	ldi	r26, 0x00	; 0
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	9c 01       	movw	r18, r24
    177e:	ad 01       	movw	r20, r26
    1780:	2a 53       	subi	r18, 0x3A	; 58
    1782:	31 09       	sbc	r19, r1
    1784:	41 09       	sbc	r20, r1
    1786:	51 09       	sbc	r21, r1
    1788:	22 f4       	brpl	.+8      	; 0x1792 <CALLBACK_HID_Device_CreateHIDReport+0x1fe>
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	50 e0       	ldi	r21, 0x00	; 0
		value -= OFFSET;
		if (value < 0) value = 0;
		if (value > 1100) value = 0;
    1792:	2d 34       	cpi	r18, 0x4D	; 77
    1794:	94 e0       	ldi	r25, 0x04	; 4
    1796:	39 07       	cpc	r19, r25
    1798:	41 05       	cpc	r20, r1
    179a:	51 05       	cpc	r21, r1
    179c:	24 f0       	brlt	.+8      	; 0x17a6 <CALLBACK_HID_Device_CreateHIDReport+0x212>
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e0       	ldi	r20, 0x00	; 0
		int32_t v = ((value * value) /*<< 1*/) + (value * /*6193*/3096);// + 4752;
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	ca 01       	movw	r24, r20
    17a8:	b9 01       	movw	r22, r18
    17aa:	68 5e       	subi	r22, 0xE8	; 232
    17ac:	73 4f       	sbci	r23, 0xF3	; 243
    17ae:	8f 4f       	sbci	r24, 0xFF	; 255
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	d3 d2       	rcall	.+1446   	; 0x1d5a <__mulsi3>
    17b4:	06 2f       	mov	r16, r22
    17b6:	17 2f       	mov	r17, r23
    17b8:	28 2f       	mov	r18, r24
    17ba:	39 2f       	mov	r19, r25
    17bc:	33 23       	and	r19, r19
    17be:	24 f4       	brge	.+8      	; 0x17c8 <CALLBACK_HID_Device_CreateHIDReport+0x234>
    17c0:	00 e0       	ldi	r16, 0x00	; 0
    17c2:	10 e0       	ldi	r17, 0x00	; 0
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	a9 01       	movw	r20, r18
    17ca:	98 01       	movw	r18, r16
    17cc:	29 35       	cpi	r18, 0x59	; 89
    17ce:	e7 e3       	ldi	r30, 0x37	; 55
    17d0:	3e 07       	cpc	r19, r30
    17d2:	ef e3       	ldi	r30, 0x3F	; 63
    17d4:	4e 07       	cpc	r20, r30
    17d6:	51 05       	cpc	r21, r1
    17d8:	24 f0       	brlt	.+8      	; 0x17e2 <CALLBACK_HID_Device_CreateHIDReport+0x24e>
    17da:	28 e5       	ldi	r18, 0x58	; 88
    17dc:	37 e3       	ldi	r19, 0x37	; 55
    17de:	4f e3       	ldi	r20, 0x3F	; 63
		if (v < 0) v = 0;
		//if (v > 8285873) v = 8285873;
		if (v > 4142936) v = 4142936;
		wy += v;
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	82 0e       	add	r8, r18
    17e4:	93 1e       	adc	r9, r19
    17e6:	a4 1e       	adc	r10, r20
		cy += v * y;
    17e8:	b5 1e       	adc	r11, r21
    17ea:	66 2d       	mov	r22, r6
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	b3 d2       	rcall	.+1382   	; 0x1d5a <__mulsi3>
    17f4:	c6 0e       	add	r12, r22
    17f6:	d7 1e       	adc	r13, r23
    17f8:	e8 1e       	adc	r14, r24
	//CDC_Device_SendString(&VirtualSerial_CDC_Interface, "\n");

	int32_t wy = 0;
	int32_t cy = 0;

	for (uint8_t ry = 0; ry < 10; ry++) {
    17fa:	f9 1e       	adc	r15, r25
    17fc:	ff 81       	ldd	r31, Y+7	; 0x07
    17fe:	ff 5f       	subi	r31, 0xFF	; 255
    1800:	ff 83       	std	Y+7, r31	; 0x07
    1802:	fa 30       	cpi	r31, 0x0A	; 10
		if (v > 4142936) v = 4142936;
		wy += v;
		cy += v * y;
	}

	float tpy = (4095.875f/*3640.7f*//*77777778f*/) * ((((float) cy) / ((float) wy)) - 0.5f);
    1804:	09 f0       	breq	.+2      	; 0x1808 <CALLBACK_HID_Device_CreateHIDReport+0x274>
    1806:	a9 cf       	rjmp	.-174    	; 0x175a <CALLBACK_HID_Device_CreateHIDReport+0x1c6>
    1808:	c7 01       	movw	r24, r14
    180a:	b6 01       	movw	r22, r12
    180c:	87 d1       	rcall	.+782    	; 0x1b1c <__floatsisf>
    180e:	6b 01       	movw	r12, r22
    1810:	7c 01       	movw	r14, r24
    1812:	c5 01       	movw	r24, r10
    1814:	b4 01       	movw	r22, r8
    1816:	82 d1       	rcall	.+772    	; 0x1b1c <__floatsisf>
    1818:	9b 01       	movw	r18, r22
    181a:	ac 01       	movw	r20, r24
    181c:	c7 01       	movw	r24, r14
    181e:	b6 01       	movw	r22, r12
    1820:	e2 d0       	rcall	.+452    	; 0x19e6 <__divsf3>
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	5f e3       	ldi	r21, 0x3F	; 63
    182a:	74 d0       	rcall	.+232    	; 0x1914 <__subsf3>
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	3e ef       	ldi	r19, 0xFE	; 254
    1830:	4f e7       	ldi	r20, 0x7F	; 127
    1832:	55 e4       	ldi	r21, 0x45	; 69
    1834:	27 d2       	rcall	.+1102   	; 0x1c84 <__mulsf3>
    1836:	6b 01       	movw	r12, r22
	if (tpy < 0) tpy = 0;
    1838:	7c 01       	movw	r14, r24
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	a9 01       	movw	r20, r18
    1840:	ce d0       	rcall	.+412    	; 0x19de <__cmpsf2>
    1842:	88 23       	and	r24, r24
    1844:	9c f0       	brlt	.+38     	; 0x186c <CALLBACK_HID_Device_CreateHIDReport+0x2d8>
	if (tpy > 32767) tpy = 32767;
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	3e ef       	ldi	r19, 0xFE	; 254
    184a:	4f ef       	ldi	r20, 0xFF	; 255
    184c:	56 e4       	ldi	r21, 0x46	; 70
    184e:	c7 01       	movw	r24, r14
    1850:	b6 01       	movw	r22, r12
    1852:	14 d2       	rcall	.+1064   	; 0x1c7c <__gesf2>
    1854:	18 16       	cp	r1, r24
    1856:	6c f4       	brge	.+26     	; 0x1872 <CALLBACK_HID_Device_CreateHIDReport+0x2de>
    1858:	0f 2e       	mov	r0, r31
    185a:	c1 2c       	mov	r12, r1
    185c:	fe ef       	ldi	r31, 0xFE	; 254
    185e:	df 2e       	mov	r13, r31
    1860:	ee 24       	eor	r14, r14
    1862:	ea 94       	dec	r14
    1864:	f6 e4       	ldi	r31, 0x46	; 70
    1866:	ff 2e       	mov	r15, r31
    1868:	f0 2d       	mov	r31, r0
    186a:	03 c0       	rjmp	.+6      	; 0x1872 <CALLBACK_HID_Device_CreateHIDReport+0x2de>
		wy += v;
		cy += v * y;
	}

	float tpy = (4095.875f/*3640.7f*//*77777778f*/) * ((((float) cy) / ((float) wy)) - 0.5f);
	if (tpy < 0) tpy = 0;
    186c:	c1 2c       	mov	r12, r1
    186e:	d1 2c       	mov	r13, r1
    1870:	76 01       	movw	r14, r12
	if (tpy > 32767) tpy = 32767;
	int16_t peny = (int16_t) tpy;//((4095.875f/*3640.7f*//*77777778f*/) * (((float) cy) / ((float) wy)));
    1872:	c7 01       	movw	r24, r14
    1874:	b6 01       	movw	r22, r12
    1876:	1f d1       	rcall	.+574    	; 0x1ab6 <__fixsfsi>
    1878:	77 23       	and	r23, r23
    187a:	14 f4       	brge	.+4      	; 0x1880 <CALLBACK_HID_Device_CreateHIDReport+0x2ec>
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
	CDC_Device_SendString(&VirtualSerial_CDC_Interface, stry);
	CDC_Device_SendString(&VirtualSerial_CDC_Interface, "\n");*/

	if (peny < 0) peny = 0;
	
	lastX = penx;
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <lastX+0x1>
    1888:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <lastX>
    188c:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <lastY+0x1>
	lastY = peny;
    1890:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <lastY>
    1894:	9b ea       	ldi	r25, 0xAB	; 171

	//sei();

	if (wx < 828587 || wy < 828587) {
    1896:	29 16       	cp	r2, r25
    1898:	94 ea       	ldi	r25, 0xA4	; 164
    189a:	39 06       	cpc	r3, r25
    189c:	9c e0       	ldi	r25, 0x0C	; 12
    189e:	49 06       	cpc	r4, r25
    18a0:	51 04       	cpc	r5, r1
    18a2:	44 f0       	brlt	.+16     	; 0x18b4 <CALLBACK_HID_Device_CreateHIDReport+0x320>
    18a4:	eb ea       	ldi	r30, 0xAB	; 171
    18a6:	8e 16       	cp	r8, r30
    18a8:	e4 ea       	ldi	r30, 0xA4	; 164
    18aa:	9e 06       	cpc	r9, r30
    18ac:	ec e0       	ldi	r30, 0x0C	; 12
    18ae:	ae 06       	cpc	r10, r30
    18b0:	b1 04       	cpc	r11, r1
    18b2:	34 f4       	brge	.+12     	; 0x18c0 <CALLBACK_HID_Device_CreateHIDReport+0x32c>
    18b4:	ed 81       	ldd	r30, Y+5	; 0x05
		*ReportSize = 0;
    18b6:	fe 81       	ldd	r31, Y+6	; 0x06
    18b8:	11 82       	std	Z+1, r1	; 0x01
    18ba:	10 82       	st	Z, r1
    18bc:	80 e0       	ldi	r24, 0x00	; 0
		return false;
    18be:	0f c0       	rjmp	.+30     	; 0x18de <CALLBACK_HID_Device_CreateHIDReport+0x34a>
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	MouseReport->X = penx;
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
    18cc:	73 83       	std	Z+3, r23	; 0x03
	MouseReport->Y = peny;
    18ce:	62 83       	std	Z+2, r22	; 0x02
    18d0:	84 e0       	ldi	r24, 0x04	; 4

	*ReportSize = sizeof(USB_MouseReport_Data_t);
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	ed 81       	ldd	r30, Y+5	; 0x05
    18d6:	fe 81       	ldd	r31, Y+6	; 0x06
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	80 83       	st	Z, r24
    18dc:	81 e0       	ldi	r24, 0x01	; 1
	return true;
    18de:	27 96       	adiw	r28, 0x07	; 7
}
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	cf 90       	pop	r12
    18fa:	bf 90       	pop	r11
    18fc:	af 90       	pop	r10
    18fe:	9f 90       	pop	r9
    1900:	8f 90       	pop	r8
    1902:	7f 90       	pop	r7
    1904:	6f 90       	pop	r6
    1906:	5f 90       	pop	r5
    1908:	4f 90       	pop	r4
    190a:	3f 90       	pop	r3
    190c:	2f 90       	pop	r2
    190e:	08 95       	ret

00001910 <CALLBACK_HID_Device_ProcessHIDReport>:
    1910:	08 95       	ret

00001912 <EVENT_CDC_Device_ControLineStateChanged>:
 *  control lines sent from the host..
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo)
{
    1912:	08 95       	ret

00001914 <__subsf3>:
    1914:	50 58       	subi	r21, 0x80	; 128

00001916 <__addsf3>:
    1916:	bb 27       	eor	r27, r27
    1918:	aa 27       	eor	r26, r26
    191a:	0e d0       	rcall	.+28     	; 0x1938 <__addsf3x>
    191c:	75 c1       	rjmp	.+746    	; 0x1c08 <__fp_round>
    191e:	66 d1       	rcall	.+716    	; 0x1bec <__fp_pscA>
    1920:	30 f0       	brcs	.+12     	; 0x192e <__addsf3+0x18>
    1922:	6b d1       	rcall	.+726    	; 0x1bfa <__fp_pscB>
    1924:	20 f0       	brcs	.+8      	; 0x192e <__addsf3+0x18>
    1926:	31 f4       	brne	.+12     	; 0x1934 <__addsf3+0x1e>
    1928:	9f 3f       	cpi	r25, 0xFF	; 255
    192a:	11 f4       	brne	.+4      	; 0x1930 <__addsf3+0x1a>
    192c:	1e f4       	brtc	.+6      	; 0x1934 <__addsf3+0x1e>
    192e:	5b c1       	rjmp	.+694    	; 0x1be6 <__fp_nan>
    1930:	0e f4       	brtc	.+2      	; 0x1934 <__addsf3+0x1e>
    1932:	e0 95       	com	r30
    1934:	e7 fb       	bst	r30, 7
    1936:	51 c1       	rjmp	.+674    	; 0x1bda <__fp_inf>

00001938 <__addsf3x>:
    1938:	e9 2f       	mov	r30, r25
    193a:	77 d1       	rcall	.+750    	; 0x1c2a <__fp_split3>
    193c:	80 f3       	brcs	.-32     	; 0x191e <__addsf3+0x8>
    193e:	ba 17       	cp	r27, r26
    1940:	62 07       	cpc	r22, r18
    1942:	73 07       	cpc	r23, r19
    1944:	84 07       	cpc	r24, r20
    1946:	95 07       	cpc	r25, r21
    1948:	18 f0       	brcs	.+6      	; 0x1950 <__addsf3x+0x18>
    194a:	71 f4       	brne	.+28     	; 0x1968 <__addsf3x+0x30>
    194c:	9e f5       	brtc	.+102    	; 0x19b4 <__addsf3x+0x7c>
    194e:	8f c1       	rjmp	.+798    	; 0x1c6e <__fp_zero>
    1950:	0e f4       	brtc	.+2      	; 0x1954 <__addsf3x+0x1c>
    1952:	e0 95       	com	r30
    1954:	0b 2e       	mov	r0, r27
    1956:	ba 2f       	mov	r27, r26
    1958:	a0 2d       	mov	r26, r0
    195a:	0b 01       	movw	r0, r22
    195c:	b9 01       	movw	r22, r18
    195e:	90 01       	movw	r18, r0
    1960:	0c 01       	movw	r0, r24
    1962:	ca 01       	movw	r24, r20
    1964:	a0 01       	movw	r20, r0
    1966:	11 24       	eor	r1, r1
    1968:	ff 27       	eor	r31, r31
    196a:	59 1b       	sub	r21, r25
    196c:	99 f0       	breq	.+38     	; 0x1994 <__addsf3x+0x5c>
    196e:	59 3f       	cpi	r21, 0xF9	; 249
    1970:	50 f4       	brcc	.+20     	; 0x1986 <__addsf3x+0x4e>
    1972:	50 3e       	cpi	r21, 0xE0	; 224
    1974:	68 f1       	brcs	.+90     	; 0x19d0 <__addsf3x+0x98>
    1976:	1a 16       	cp	r1, r26
    1978:	f0 40       	sbci	r31, 0x00	; 0
    197a:	a2 2f       	mov	r26, r18
    197c:	23 2f       	mov	r18, r19
    197e:	34 2f       	mov	r19, r20
    1980:	44 27       	eor	r20, r20
    1982:	58 5f       	subi	r21, 0xF8	; 248
    1984:	f3 cf       	rjmp	.-26     	; 0x196c <__addsf3x+0x34>
    1986:	46 95       	lsr	r20
    1988:	37 95       	ror	r19
    198a:	27 95       	ror	r18
    198c:	a7 95       	ror	r26
    198e:	f0 40       	sbci	r31, 0x00	; 0
    1990:	53 95       	inc	r21
    1992:	c9 f7       	brne	.-14     	; 0x1986 <__addsf3x+0x4e>
    1994:	7e f4       	brtc	.+30     	; 0x19b4 <__addsf3x+0x7c>
    1996:	1f 16       	cp	r1, r31
    1998:	ba 0b       	sbc	r27, r26
    199a:	62 0b       	sbc	r22, r18
    199c:	73 0b       	sbc	r23, r19
    199e:	84 0b       	sbc	r24, r20
    19a0:	ba f0       	brmi	.+46     	; 0x19d0 <__addsf3x+0x98>
    19a2:	91 50       	subi	r25, 0x01	; 1
    19a4:	a1 f0       	breq	.+40     	; 0x19ce <__addsf3x+0x96>
    19a6:	ff 0f       	add	r31, r31
    19a8:	bb 1f       	adc	r27, r27
    19aa:	66 1f       	adc	r22, r22
    19ac:	77 1f       	adc	r23, r23
    19ae:	88 1f       	adc	r24, r24
    19b0:	c2 f7       	brpl	.-16     	; 0x19a2 <__addsf3x+0x6a>
    19b2:	0e c0       	rjmp	.+28     	; 0x19d0 <__addsf3x+0x98>
    19b4:	ba 0f       	add	r27, r26
    19b6:	62 1f       	adc	r22, r18
    19b8:	73 1f       	adc	r23, r19
    19ba:	84 1f       	adc	r24, r20
    19bc:	48 f4       	brcc	.+18     	; 0x19d0 <__addsf3x+0x98>
    19be:	87 95       	ror	r24
    19c0:	77 95       	ror	r23
    19c2:	67 95       	ror	r22
    19c4:	b7 95       	ror	r27
    19c6:	f7 95       	ror	r31
    19c8:	9e 3f       	cpi	r25, 0xFE	; 254
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <__addsf3x+0x96>
    19cc:	b3 cf       	rjmp	.-154    	; 0x1934 <__addsf3+0x1e>
    19ce:	93 95       	inc	r25
    19d0:	88 0f       	add	r24, r24
    19d2:	08 f0       	brcs	.+2      	; 0x19d6 <__addsf3x+0x9e>
    19d4:	99 27       	eor	r25, r25
    19d6:	ee 0f       	add	r30, r30
    19d8:	97 95       	ror	r25
    19da:	87 95       	ror	r24
    19dc:	08 95       	ret

000019de <__cmpsf2>:
    19de:	d9 d0       	rcall	.+434    	; 0x1b92 <__fp_cmp>
    19e0:	08 f4       	brcc	.+2      	; 0x19e4 <__cmpsf2+0x6>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	08 95       	ret

000019e6 <__divsf3>:
    19e6:	0c d0       	rcall	.+24     	; 0x1a00 <__divsf3x>
    19e8:	0f c1       	rjmp	.+542    	; 0x1c08 <__fp_round>
    19ea:	07 d1       	rcall	.+526    	; 0x1bfa <__fp_pscB>
    19ec:	40 f0       	brcs	.+16     	; 0x19fe <__divsf3+0x18>
    19ee:	fe d0       	rcall	.+508    	; 0x1bec <__fp_pscA>
    19f0:	30 f0       	brcs	.+12     	; 0x19fe <__divsf3+0x18>
    19f2:	21 f4       	brne	.+8      	; 0x19fc <__divsf3+0x16>
    19f4:	5f 3f       	cpi	r21, 0xFF	; 255
    19f6:	19 f0       	breq	.+6      	; 0x19fe <__divsf3+0x18>
    19f8:	f0 c0       	rjmp	.+480    	; 0x1bda <__fp_inf>
    19fa:	51 11       	cpse	r21, r1
    19fc:	39 c1       	rjmp	.+626    	; 0x1c70 <__fp_szero>
    19fe:	f3 c0       	rjmp	.+486    	; 0x1be6 <__fp_nan>

00001a00 <__divsf3x>:
    1a00:	14 d1       	rcall	.+552    	; 0x1c2a <__fp_split3>
    1a02:	98 f3       	brcs	.-26     	; 0x19ea <__divsf3+0x4>

00001a04 <__divsf3_pse>:
    1a04:	99 23       	and	r25, r25
    1a06:	c9 f3       	breq	.-14     	; 0x19fa <__divsf3+0x14>
    1a08:	55 23       	and	r21, r21
    1a0a:	b1 f3       	breq	.-20     	; 0x19f8 <__divsf3+0x12>
    1a0c:	95 1b       	sub	r25, r21
    1a0e:	55 0b       	sbc	r21, r21
    1a10:	bb 27       	eor	r27, r27
    1a12:	aa 27       	eor	r26, r26
    1a14:	62 17       	cp	r22, r18
    1a16:	73 07       	cpc	r23, r19
    1a18:	84 07       	cpc	r24, r20
    1a1a:	38 f0       	brcs	.+14     	; 0x1a2a <__divsf3_pse+0x26>
    1a1c:	9f 5f       	subi	r25, 0xFF	; 255
    1a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a20:	22 0f       	add	r18, r18
    1a22:	33 1f       	adc	r19, r19
    1a24:	44 1f       	adc	r20, r20
    1a26:	aa 1f       	adc	r26, r26
    1a28:	a9 f3       	breq	.-22     	; 0x1a14 <__divsf3_pse+0x10>
    1a2a:	33 d0       	rcall	.+102    	; 0x1a92 <__divsf3_pse+0x8e>
    1a2c:	0e 2e       	mov	r0, r30
    1a2e:	3a f0       	brmi	.+14     	; 0x1a3e <__divsf3_pse+0x3a>
    1a30:	e0 e8       	ldi	r30, 0x80	; 128
    1a32:	30 d0       	rcall	.+96     	; 0x1a94 <__divsf3_pse+0x90>
    1a34:	91 50       	subi	r25, 0x01	; 1
    1a36:	50 40       	sbci	r21, 0x00	; 0
    1a38:	e6 95       	lsr	r30
    1a3a:	00 1c       	adc	r0, r0
    1a3c:	ca f7       	brpl	.-14     	; 0x1a30 <__divsf3_pse+0x2c>
    1a3e:	29 d0       	rcall	.+82     	; 0x1a92 <__divsf3_pse+0x8e>
    1a40:	fe 2f       	mov	r31, r30
    1a42:	27 d0       	rcall	.+78     	; 0x1a92 <__divsf3_pse+0x8e>
    1a44:	66 0f       	add	r22, r22
    1a46:	77 1f       	adc	r23, r23
    1a48:	88 1f       	adc	r24, r24
    1a4a:	bb 1f       	adc	r27, r27
    1a4c:	26 17       	cp	r18, r22
    1a4e:	37 07       	cpc	r19, r23
    1a50:	48 07       	cpc	r20, r24
    1a52:	ab 07       	cpc	r26, r27
    1a54:	b0 e8       	ldi	r27, 0x80	; 128
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <__divsf3_pse+0x56>
    1a58:	bb 0b       	sbc	r27, r27
    1a5a:	80 2d       	mov	r24, r0
    1a5c:	bf 01       	movw	r22, r30
    1a5e:	ff 27       	eor	r31, r31
    1a60:	93 58       	subi	r25, 0x83	; 131
    1a62:	5f 4f       	sbci	r21, 0xFF	; 255
    1a64:	2a f0       	brmi	.+10     	; 0x1a70 <__divsf3_pse+0x6c>
    1a66:	9e 3f       	cpi	r25, 0xFE	; 254
    1a68:	51 05       	cpc	r21, r1
    1a6a:	68 f0       	brcs	.+26     	; 0x1a86 <__divsf3_pse+0x82>
    1a6c:	b6 c0       	rjmp	.+364    	; 0x1bda <__fp_inf>
    1a6e:	00 c1       	rjmp	.+512    	; 0x1c70 <__fp_szero>
    1a70:	5f 3f       	cpi	r21, 0xFF	; 255
    1a72:	ec f3       	brlt	.-6      	; 0x1a6e <__divsf3_pse+0x6a>
    1a74:	98 3e       	cpi	r25, 0xE8	; 232
    1a76:	dc f3       	brlt	.-10     	; 0x1a6e <__divsf3_pse+0x6a>
    1a78:	86 95       	lsr	r24
    1a7a:	77 95       	ror	r23
    1a7c:	67 95       	ror	r22
    1a7e:	b7 95       	ror	r27
    1a80:	f7 95       	ror	r31
    1a82:	9f 5f       	subi	r25, 0xFF	; 255
    1a84:	c9 f7       	brne	.-14     	; 0x1a78 <__divsf3_pse+0x74>
    1a86:	88 0f       	add	r24, r24
    1a88:	91 1d       	adc	r25, r1
    1a8a:	96 95       	lsr	r25
    1a8c:	87 95       	ror	r24
    1a8e:	97 f9       	bld	r25, 7
    1a90:	08 95       	ret
    1a92:	e1 e0       	ldi	r30, 0x01	; 1
    1a94:	66 0f       	add	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	88 1f       	adc	r24, r24
    1a9a:	bb 1f       	adc	r27, r27
    1a9c:	62 17       	cp	r22, r18
    1a9e:	73 07       	cpc	r23, r19
    1aa0:	84 07       	cpc	r24, r20
    1aa2:	ba 07       	cpc	r27, r26
    1aa4:	20 f0       	brcs	.+8      	; 0x1aae <__divsf3_pse+0xaa>
    1aa6:	62 1b       	sub	r22, r18
    1aa8:	73 0b       	sbc	r23, r19
    1aaa:	84 0b       	sbc	r24, r20
    1aac:	ba 0b       	sbc	r27, r26
    1aae:	ee 1f       	adc	r30, r30
    1ab0:	88 f7       	brcc	.-30     	; 0x1a94 <__divsf3_pse+0x90>
    1ab2:	e0 95       	com	r30
    1ab4:	08 95       	ret

00001ab6 <__fixsfsi>:
    1ab6:	04 d0       	rcall	.+8      	; 0x1ac0 <__fixunssfsi>
    1ab8:	68 94       	set
    1aba:	b1 11       	cpse	r27, r1
    1abc:	d9 c0       	rjmp	.+434    	; 0x1c70 <__fp_szero>
    1abe:	08 95       	ret

00001ac0 <__fixunssfsi>:
    1ac0:	bc d0       	rcall	.+376    	; 0x1c3a <__fp_splitA>
    1ac2:	88 f0       	brcs	.+34     	; 0x1ae6 <__fixunssfsi+0x26>
    1ac4:	9f 57       	subi	r25, 0x7F	; 127
    1ac6:	90 f0       	brcs	.+36     	; 0x1aec <__fixunssfsi+0x2c>
    1ac8:	b9 2f       	mov	r27, r25
    1aca:	99 27       	eor	r25, r25
    1acc:	b7 51       	subi	r27, 0x17	; 23
    1ace:	a0 f0       	brcs	.+40     	; 0x1af8 <__fixunssfsi+0x38>
    1ad0:	d1 f0       	breq	.+52     	; 0x1b06 <__fixunssfsi+0x46>
    1ad2:	66 0f       	add	r22, r22
    1ad4:	77 1f       	adc	r23, r23
    1ad6:	88 1f       	adc	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	1a f0       	brmi	.+6      	; 0x1ae2 <__fixunssfsi+0x22>
    1adc:	ba 95       	dec	r27
    1ade:	c9 f7       	brne	.-14     	; 0x1ad2 <__fixunssfsi+0x12>
    1ae0:	12 c0       	rjmp	.+36     	; 0x1b06 <__fixunssfsi+0x46>
    1ae2:	b1 30       	cpi	r27, 0x01	; 1
    1ae4:	81 f0       	breq	.+32     	; 0x1b06 <__fixunssfsi+0x46>
    1ae6:	c3 d0       	rcall	.+390    	; 0x1c6e <__fp_zero>
    1ae8:	b1 e0       	ldi	r27, 0x01	; 1
    1aea:	08 95       	ret
    1aec:	c0 c0       	rjmp	.+384    	; 0x1c6e <__fp_zero>
    1aee:	67 2f       	mov	r22, r23
    1af0:	78 2f       	mov	r23, r24
    1af2:	88 27       	eor	r24, r24
    1af4:	b8 5f       	subi	r27, 0xF8	; 248
    1af6:	39 f0       	breq	.+14     	; 0x1b06 <__fixunssfsi+0x46>
    1af8:	b9 3f       	cpi	r27, 0xF9	; 249
    1afa:	cc f3       	brlt	.-14     	; 0x1aee <__fixunssfsi+0x2e>
    1afc:	86 95       	lsr	r24
    1afe:	77 95       	ror	r23
    1b00:	67 95       	ror	r22
    1b02:	b3 95       	inc	r27
    1b04:	d9 f7       	brne	.-10     	; 0x1afc <__fixunssfsi+0x3c>
    1b06:	3e f4       	brtc	.+14     	; 0x1b16 <__fixunssfsi+0x56>
    1b08:	90 95       	com	r25
    1b0a:	80 95       	com	r24
    1b0c:	70 95       	com	r23
    1b0e:	61 95       	neg	r22
    1b10:	7f 4f       	sbci	r23, 0xFF	; 255
    1b12:	8f 4f       	sbci	r24, 0xFF	; 255
    1b14:	9f 4f       	sbci	r25, 0xFF	; 255
    1b16:	08 95       	ret

00001b18 <__floatunsisf>:
    1b18:	e8 94       	clt
    1b1a:	09 c0       	rjmp	.+18     	; 0x1b2e <__floatsisf+0x12>

00001b1c <__floatsisf>:
    1b1c:	97 fb       	bst	r25, 7
    1b1e:	3e f4       	brtc	.+14     	; 0x1b2e <__floatsisf+0x12>
    1b20:	90 95       	com	r25
    1b22:	80 95       	com	r24
    1b24:	70 95       	com	r23
    1b26:	61 95       	neg	r22
    1b28:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2e:	99 23       	and	r25, r25
    1b30:	a9 f0       	breq	.+42     	; 0x1b5c <__floatsisf+0x40>
    1b32:	f9 2f       	mov	r31, r25
    1b34:	96 e9       	ldi	r25, 0x96	; 150
    1b36:	bb 27       	eor	r27, r27
    1b38:	93 95       	inc	r25
    1b3a:	f6 95       	lsr	r31
    1b3c:	87 95       	ror	r24
    1b3e:	77 95       	ror	r23
    1b40:	67 95       	ror	r22
    1b42:	b7 95       	ror	r27
    1b44:	f1 11       	cpse	r31, r1
    1b46:	f8 cf       	rjmp	.-16     	; 0x1b38 <__floatsisf+0x1c>
    1b48:	fa f4       	brpl	.+62     	; 0x1b88 <__floatsisf+0x6c>
    1b4a:	bb 0f       	add	r27, r27
    1b4c:	11 f4       	brne	.+4      	; 0x1b52 <__floatsisf+0x36>
    1b4e:	60 ff       	sbrs	r22, 0
    1b50:	1b c0       	rjmp	.+54     	; 0x1b88 <__floatsisf+0x6c>
    1b52:	6f 5f       	subi	r22, 0xFF	; 255
    1b54:	7f 4f       	sbci	r23, 0xFF	; 255
    1b56:	8f 4f       	sbci	r24, 0xFF	; 255
    1b58:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5a:	16 c0       	rjmp	.+44     	; 0x1b88 <__floatsisf+0x6c>
    1b5c:	88 23       	and	r24, r24
    1b5e:	11 f0       	breq	.+4      	; 0x1b64 <__floatsisf+0x48>
    1b60:	96 e9       	ldi	r25, 0x96	; 150
    1b62:	11 c0       	rjmp	.+34     	; 0x1b86 <__floatsisf+0x6a>
    1b64:	77 23       	and	r23, r23
    1b66:	21 f0       	breq	.+8      	; 0x1b70 <__floatsisf+0x54>
    1b68:	9e e8       	ldi	r25, 0x8E	; 142
    1b6a:	87 2f       	mov	r24, r23
    1b6c:	76 2f       	mov	r23, r22
    1b6e:	05 c0       	rjmp	.+10     	; 0x1b7a <__floatsisf+0x5e>
    1b70:	66 23       	and	r22, r22
    1b72:	71 f0       	breq	.+28     	; 0x1b90 <__floatsisf+0x74>
    1b74:	96 e8       	ldi	r25, 0x86	; 134
    1b76:	86 2f       	mov	r24, r22
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	2a f0       	brmi	.+10     	; 0x1b88 <__floatsisf+0x6c>
    1b7e:	9a 95       	dec	r25
    1b80:	66 0f       	add	r22, r22
    1b82:	77 1f       	adc	r23, r23
    1b84:	88 1f       	adc	r24, r24
    1b86:	da f7       	brpl	.-10     	; 0x1b7e <__floatsisf+0x62>
    1b88:	88 0f       	add	r24, r24
    1b8a:	96 95       	lsr	r25
    1b8c:	87 95       	ror	r24
    1b8e:	97 f9       	bld	r25, 7
    1b90:	08 95       	ret

00001b92 <__fp_cmp>:
    1b92:	99 0f       	add	r25, r25
    1b94:	00 08       	sbc	r0, r0
    1b96:	55 0f       	add	r21, r21
    1b98:	aa 0b       	sbc	r26, r26
    1b9a:	e0 e8       	ldi	r30, 0x80	; 128
    1b9c:	fe ef       	ldi	r31, 0xFE	; 254
    1b9e:	16 16       	cp	r1, r22
    1ba0:	17 06       	cpc	r1, r23
    1ba2:	e8 07       	cpc	r30, r24
    1ba4:	f9 07       	cpc	r31, r25
    1ba6:	c0 f0       	brcs	.+48     	; 0x1bd8 <__fp_cmp+0x46>
    1ba8:	12 16       	cp	r1, r18
    1baa:	13 06       	cpc	r1, r19
    1bac:	e4 07       	cpc	r30, r20
    1bae:	f5 07       	cpc	r31, r21
    1bb0:	98 f0       	brcs	.+38     	; 0x1bd8 <__fp_cmp+0x46>
    1bb2:	62 1b       	sub	r22, r18
    1bb4:	73 0b       	sbc	r23, r19
    1bb6:	84 0b       	sbc	r24, r20
    1bb8:	95 0b       	sbc	r25, r21
    1bba:	39 f4       	brne	.+14     	; 0x1bca <__fp_cmp+0x38>
    1bbc:	0a 26       	eor	r0, r26
    1bbe:	61 f0       	breq	.+24     	; 0x1bd8 <__fp_cmp+0x46>
    1bc0:	23 2b       	or	r18, r19
    1bc2:	24 2b       	or	r18, r20
    1bc4:	25 2b       	or	r18, r21
    1bc6:	21 f4       	brne	.+8      	; 0x1bd0 <__fp_cmp+0x3e>
    1bc8:	08 95       	ret
    1bca:	0a 26       	eor	r0, r26
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <__fp_cmp+0x3e>
    1bce:	a1 40       	sbci	r26, 0x01	; 1
    1bd0:	a6 95       	lsr	r26
    1bd2:	8f ef       	ldi	r24, 0xFF	; 255
    1bd4:	81 1d       	adc	r24, r1
    1bd6:	81 1d       	adc	r24, r1
    1bd8:	08 95       	ret

00001bda <__fp_inf>:
    1bda:	97 f9       	bld	r25, 7
    1bdc:	9f 67       	ori	r25, 0x7F	; 127
    1bde:	80 e8       	ldi	r24, 0x80	; 128
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	08 95       	ret

00001be6 <__fp_nan>:
    1be6:	9f ef       	ldi	r25, 0xFF	; 255
    1be8:	80 ec       	ldi	r24, 0xC0	; 192
    1bea:	08 95       	ret

00001bec <__fp_pscA>:
    1bec:	00 24       	eor	r0, r0
    1bee:	0a 94       	dec	r0
    1bf0:	16 16       	cp	r1, r22
    1bf2:	17 06       	cpc	r1, r23
    1bf4:	18 06       	cpc	r1, r24
    1bf6:	09 06       	cpc	r0, r25
    1bf8:	08 95       	ret

00001bfa <__fp_pscB>:
    1bfa:	00 24       	eor	r0, r0
    1bfc:	0a 94       	dec	r0
    1bfe:	12 16       	cp	r1, r18
    1c00:	13 06       	cpc	r1, r19
    1c02:	14 06       	cpc	r1, r20
    1c04:	05 06       	cpc	r0, r21
    1c06:	08 95       	ret

00001c08 <__fp_round>:
    1c08:	09 2e       	mov	r0, r25
    1c0a:	03 94       	inc	r0
    1c0c:	00 0c       	add	r0, r0
    1c0e:	11 f4       	brne	.+4      	; 0x1c14 <__fp_round+0xc>
    1c10:	88 23       	and	r24, r24
    1c12:	52 f0       	brmi	.+20     	; 0x1c28 <__fp_round+0x20>
    1c14:	bb 0f       	add	r27, r27
    1c16:	40 f4       	brcc	.+16     	; 0x1c28 <__fp_round+0x20>
    1c18:	bf 2b       	or	r27, r31
    1c1a:	11 f4       	brne	.+4      	; 0x1c20 <__fp_round+0x18>
    1c1c:	60 ff       	sbrs	r22, 0
    1c1e:	04 c0       	rjmp	.+8      	; 0x1c28 <__fp_round+0x20>
    1c20:	6f 5f       	subi	r22, 0xFF	; 255
    1c22:	7f 4f       	sbci	r23, 0xFF	; 255
    1c24:	8f 4f       	sbci	r24, 0xFF	; 255
    1c26:	9f 4f       	sbci	r25, 0xFF	; 255
    1c28:	08 95       	ret

00001c2a <__fp_split3>:
    1c2a:	57 fd       	sbrc	r21, 7
    1c2c:	90 58       	subi	r25, 0x80	; 128
    1c2e:	44 0f       	add	r20, r20
    1c30:	55 1f       	adc	r21, r21
    1c32:	59 f0       	breq	.+22     	; 0x1c4a <__fp_splitA+0x10>
    1c34:	5f 3f       	cpi	r21, 0xFF	; 255
    1c36:	71 f0       	breq	.+28     	; 0x1c54 <__fp_splitA+0x1a>
    1c38:	47 95       	ror	r20

00001c3a <__fp_splitA>:
    1c3a:	88 0f       	add	r24, r24
    1c3c:	97 fb       	bst	r25, 7
    1c3e:	99 1f       	adc	r25, r25
    1c40:	61 f0       	breq	.+24     	; 0x1c5a <__fp_splitA+0x20>
    1c42:	9f 3f       	cpi	r25, 0xFF	; 255
    1c44:	79 f0       	breq	.+30     	; 0x1c64 <__fp_splitA+0x2a>
    1c46:	87 95       	ror	r24
    1c48:	08 95       	ret
    1c4a:	12 16       	cp	r1, r18
    1c4c:	13 06       	cpc	r1, r19
    1c4e:	14 06       	cpc	r1, r20
    1c50:	55 1f       	adc	r21, r21
    1c52:	f2 cf       	rjmp	.-28     	; 0x1c38 <__fp_split3+0xe>
    1c54:	46 95       	lsr	r20
    1c56:	f1 df       	rcall	.-30     	; 0x1c3a <__fp_splitA>
    1c58:	08 c0       	rjmp	.+16     	; 0x1c6a <__fp_splitA+0x30>
    1c5a:	16 16       	cp	r1, r22
    1c5c:	17 06       	cpc	r1, r23
    1c5e:	18 06       	cpc	r1, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	f1 cf       	rjmp	.-30     	; 0x1c46 <__fp_splitA+0xc>
    1c64:	86 95       	lsr	r24
    1c66:	71 05       	cpc	r23, r1
    1c68:	61 05       	cpc	r22, r1
    1c6a:	08 94       	sec
    1c6c:	08 95       	ret

00001c6e <__fp_zero>:
    1c6e:	e8 94       	clt

00001c70 <__fp_szero>:
    1c70:	bb 27       	eor	r27, r27
    1c72:	66 27       	eor	r22, r22
    1c74:	77 27       	eor	r23, r23
    1c76:	cb 01       	movw	r24, r22
    1c78:	97 f9       	bld	r25, 7
    1c7a:	08 95       	ret

00001c7c <__gesf2>:
    1c7c:	8a df       	rcall	.-236    	; 0x1b92 <__fp_cmp>
    1c7e:	08 f4       	brcc	.+2      	; 0x1c82 <__gesf2+0x6>
    1c80:	8f ef       	ldi	r24, 0xFF	; 255
    1c82:	08 95       	ret

00001c84 <__mulsf3>:
    1c84:	0a d0       	rcall	.+20     	; 0x1c9a <__mulsf3x>
    1c86:	c0 cf       	rjmp	.-128    	; 0x1c08 <__fp_round>
    1c88:	b1 df       	rcall	.-158    	; 0x1bec <__fp_pscA>
    1c8a:	28 f0       	brcs	.+10     	; 0x1c96 <__mulsf3+0x12>
    1c8c:	b6 df       	rcall	.-148    	; 0x1bfa <__fp_pscB>
    1c8e:	18 f0       	brcs	.+6      	; 0x1c96 <__mulsf3+0x12>
    1c90:	95 23       	and	r25, r21
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <__mulsf3+0x12>
    1c94:	a2 cf       	rjmp	.-188    	; 0x1bda <__fp_inf>
    1c96:	a7 cf       	rjmp	.-178    	; 0x1be6 <__fp_nan>
    1c98:	eb cf       	rjmp	.-42     	; 0x1c70 <__fp_szero>

00001c9a <__mulsf3x>:
    1c9a:	c7 df       	rcall	.-114    	; 0x1c2a <__fp_split3>
    1c9c:	a8 f3       	brcs	.-22     	; 0x1c88 <__mulsf3+0x4>

00001c9e <__mulsf3_pse>:
    1c9e:	99 23       	and	r25, r25
    1ca0:	d9 f3       	breq	.-10     	; 0x1c98 <__mulsf3+0x14>
    1ca2:	55 23       	and	r21, r21
    1ca4:	c9 f3       	breq	.-14     	; 0x1c98 <__mulsf3+0x14>
    1ca6:	95 0f       	add	r25, r21
    1ca8:	50 e0       	ldi	r21, 0x00	; 0
    1caa:	55 1f       	adc	r21, r21
    1cac:	aa 27       	eor	r26, r26
    1cae:	ee 27       	eor	r30, r30
    1cb0:	ff 27       	eor	r31, r31
    1cb2:	bb 27       	eor	r27, r27
    1cb4:	00 24       	eor	r0, r0
    1cb6:	08 94       	sec
    1cb8:	67 95       	ror	r22
    1cba:	20 f4       	brcc	.+8      	; 0x1cc4 <__mulsf3_pse+0x26>
    1cbc:	e2 0f       	add	r30, r18
    1cbe:	f3 1f       	adc	r31, r19
    1cc0:	b4 1f       	adc	r27, r20
    1cc2:	0a 1e       	adc	r0, r26
    1cc4:	22 0f       	add	r18, r18
    1cc6:	33 1f       	adc	r19, r19
    1cc8:	44 1f       	adc	r20, r20
    1cca:	aa 1f       	adc	r26, r26
    1ccc:	66 95       	lsr	r22
    1cce:	a9 f7       	brne	.-22     	; 0x1cba <__mulsf3_pse+0x1c>
    1cd0:	77 95       	ror	r23
    1cd2:	30 f4       	brcc	.+12     	; 0x1ce0 <__mulsf3_pse+0x42>
    1cd4:	f3 0f       	add	r31, r19
    1cd6:	b4 1f       	adc	r27, r20
    1cd8:	0a 1e       	adc	r0, r26
    1cda:	12 1e       	adc	r1, r18
    1cdc:	08 f4       	brcc	.+2      	; 0x1ce0 <__mulsf3_pse+0x42>
    1cde:	63 95       	inc	r22
    1ce0:	33 0f       	add	r19, r19
    1ce2:	44 1f       	adc	r20, r20
    1ce4:	aa 1f       	adc	r26, r26
    1ce6:	22 1f       	adc	r18, r18
    1ce8:	76 95       	lsr	r23
    1cea:	99 f7       	brne	.-26     	; 0x1cd2 <__mulsf3_pse+0x34>
    1cec:	87 95       	ror	r24
    1cee:	20 f4       	brcc	.+8      	; 0x1cf8 <__mulsf3_pse+0x5a>
    1cf0:	b4 0f       	add	r27, r20
    1cf2:	0a 1e       	adc	r0, r26
    1cf4:	12 1e       	adc	r1, r18
    1cf6:	63 1f       	adc	r22, r19
    1cf8:	44 0f       	add	r20, r20
    1cfa:	aa 1f       	adc	r26, r26
    1cfc:	22 1f       	adc	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	86 95       	lsr	r24
    1d02:	a9 f7       	brne	.-22     	; 0x1cee <__mulsf3_pse+0x50>
    1d04:	86 2f       	mov	r24, r22
    1d06:	71 2d       	mov	r23, r1
    1d08:	60 2d       	mov	r22, r0
    1d0a:	11 24       	eor	r1, r1
    1d0c:	9f 57       	subi	r25, 0x7F	; 127
    1d0e:	50 40       	sbci	r21, 0x00	; 0
    1d10:	8a f0       	brmi	.+34     	; 0x1d34 <__mulsf3_pse+0x96>
    1d12:	e1 f0       	breq	.+56     	; 0x1d4c <__mulsf3_pse+0xae>
    1d14:	88 23       	and	r24, r24
    1d16:	4a f0       	brmi	.+18     	; 0x1d2a <__mulsf3_pse+0x8c>
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	bb 1f       	adc	r27, r27
    1d1e:	66 1f       	adc	r22, r22
    1d20:	77 1f       	adc	r23, r23
    1d22:	88 1f       	adc	r24, r24
    1d24:	91 50       	subi	r25, 0x01	; 1
    1d26:	50 40       	sbci	r21, 0x00	; 0
    1d28:	a9 f7       	brne	.-22     	; 0x1d14 <__mulsf3_pse+0x76>
    1d2a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d2c:	51 05       	cpc	r21, r1
    1d2e:	70 f0       	brcs	.+28     	; 0x1d4c <__mulsf3_pse+0xae>
    1d30:	54 cf       	rjmp	.-344    	; 0x1bda <__fp_inf>
    1d32:	9e cf       	rjmp	.-196    	; 0x1c70 <__fp_szero>
    1d34:	5f 3f       	cpi	r21, 0xFF	; 255
    1d36:	ec f3       	brlt	.-6      	; 0x1d32 <__mulsf3_pse+0x94>
    1d38:	98 3e       	cpi	r25, 0xE8	; 232
    1d3a:	dc f3       	brlt	.-10     	; 0x1d32 <__mulsf3_pse+0x94>
    1d3c:	86 95       	lsr	r24
    1d3e:	77 95       	ror	r23
    1d40:	67 95       	ror	r22
    1d42:	b7 95       	ror	r27
    1d44:	f7 95       	ror	r31
    1d46:	e7 95       	ror	r30
    1d48:	9f 5f       	subi	r25, 0xFF	; 255
    1d4a:	c1 f7       	brne	.-16     	; 0x1d3c <__mulsf3_pse+0x9e>
    1d4c:	fe 2b       	or	r31, r30
    1d4e:	88 0f       	add	r24, r24
    1d50:	91 1d       	adc	r25, r1
    1d52:	96 95       	lsr	r25
    1d54:	87 95       	ror	r24
    1d56:	97 f9       	bld	r25, 7
    1d58:	08 95       	ret

00001d5a <__mulsi3>:
    1d5a:	ee 27       	eor	r30, r30
    1d5c:	ff 27       	eor	r31, r31

00001d5e <__mulsi3_helper>:
    1d5e:	aa 27       	eor	r26, r26
    1d60:	bb 27       	eor	r27, r27
    1d62:	08 c0       	rjmp	.+16     	; 0x1d74 <__mulsi3_helper+0x16>
    1d64:	a2 0f       	add	r26, r18
    1d66:	b3 1f       	adc	r27, r19
    1d68:	e4 1f       	adc	r30, r20
    1d6a:	f5 1f       	adc	r31, r21
    1d6c:	22 0f       	add	r18, r18
    1d6e:	33 1f       	adc	r19, r19
    1d70:	44 1f       	adc	r20, r20
    1d72:	55 1f       	adc	r21, r21
    1d74:	96 95       	lsr	r25
    1d76:	87 95       	ror	r24
    1d78:	77 95       	ror	r23
    1d7a:	67 95       	ror	r22
    1d7c:	98 f3       	brcs	.-26     	; 0x1d64 <__mulsi3_helper+0x6>
    1d7e:	70 40       	sbci	r23, 0x00	; 0
    1d80:	a9 f7       	brne	.-22     	; 0x1d6c <__mulsi3_helper+0xe>
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	99 f7       	brne	.-26     	; 0x1d6c <__mulsi3_helper+0xe>
    1d86:	bd 01       	movw	r22, r26
    1d88:	cf 01       	movw	r24, r30
    1d8a:	08 95       	ret

00001d8c <memcmp>:
    1d8c:	fb 01       	movw	r30, r22
    1d8e:	dc 01       	movw	r26, r24
    1d90:	04 c0       	rjmp	.+8      	; 0x1d9a <memcmp+0xe>
    1d92:	8d 91       	ld	r24, X+
    1d94:	01 90       	ld	r0, Z+
    1d96:	80 19       	sub	r24, r0
    1d98:	21 f4       	brne	.+8      	; 0x1da2 <memcmp+0x16>
    1d9a:	41 50       	subi	r20, 0x01	; 1
    1d9c:	50 40       	sbci	r21, 0x00	; 0
    1d9e:	c8 f7       	brcc	.-14     	; 0x1d92 <memcmp+0x6>
    1da0:	88 1b       	sub	r24, r24
    1da2:	99 0b       	sbc	r25, r25
    1da4:	08 95       	ret

00001da6 <memcpy>:
    1da6:	fb 01       	movw	r30, r22
    1da8:	dc 01       	movw	r26, r24
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <memcpy+0xa>
    1dac:	01 90       	ld	r0, Z+
    1dae:	0d 92       	st	X+, r0
    1db0:	41 50       	subi	r20, 0x01	; 1
    1db2:	50 40       	sbci	r21, 0x00	; 0
    1db4:	d8 f7       	brcc	.-10     	; 0x1dac <memcpy+0x6>
    1db6:	08 95       	ret

00001db8 <memset>:
    1db8:	dc 01       	movw	r26, r24
    1dba:	01 c0       	rjmp	.+2      	; 0x1dbe <memset+0x6>
    1dbc:	6d 93       	st	X+, r22
    1dbe:	41 50       	subi	r20, 0x01	; 1
    1dc0:	50 40       	sbci	r21, 0x00	; 0
    1dc2:	e0 f7       	brcc	.-8      	; 0x1dbc <memset+0x4>
    1dc4:	08 95       	ret

00001dc6 <_exit>:
    1dc6:	f8 94       	cli

00001dc8 <__stop_program>:
    1dc8:	ff cf       	rjmp	.-2      	; 0x1dc8 <__stop_program>
